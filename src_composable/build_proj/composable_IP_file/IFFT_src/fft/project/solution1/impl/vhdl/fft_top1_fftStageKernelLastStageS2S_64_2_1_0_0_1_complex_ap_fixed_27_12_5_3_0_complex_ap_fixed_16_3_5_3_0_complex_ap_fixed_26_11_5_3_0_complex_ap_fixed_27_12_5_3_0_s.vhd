-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft_top1_fftStageKernelLastStageS2S_64_2_1_0_0_1_complex_ap_fixed_27_12_5_3_0_complex_ap_fixed_16_3_5_3_0_complex_ap_fixed_26_11_5_3_0_complex_ap_fixed_27_12_5_3_0_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fftOutData_local2_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    fftOutData_local2_empty_n : IN STD_LOGIC;
    fftOutData_local2_read : OUT STD_LOGIC;
    fftOutData_local_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    fftOutData_local_full_n : IN STD_LOGIC;
    fftOutData_local_write : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC );
end;


architecture behav of fft_top1_fftStageKernelLastStageS2S_64_2_1_0_0_1_complex_ap_fixed_27_12_5_3_0_complex_ap_fixed_16_3_5_3_0_complex_ap_fixed_26_11_5_3_0_complex_ap_fixed_27_12_5_3_0_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_79 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv27_1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv39_0 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal icmp_ln215_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal tmp_nbreadreq_fu_78_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal tmp_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal fftOutData_local2_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal fftOutData_local_blk_n : STD_LOGIC;
    signal iter1_reg_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_of_ns_M_real_V_0_fu_145_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal X_of_ns_M_real_V_0_reg_312 : STD_LOGIC_VECTOR (25 downto 0);
    signal X_of_ns_M_imag_V_0_reg_318 : STD_LOGIC_VECTOR (25 downto 0);
    signal X_of_ns_M_real_V_1_reg_324 : STD_LOGIC_VECTOR (25 downto 0);
    signal X_of_ns_M_imag_V_1_reg_330 : STD_LOGIC_VECTOR (25 downto 0);
    signal iter_fu_179_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal iter_reg_336 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln215_reg_341 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_iter1_phi_fu_118_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_iter_1_phi_fu_131_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_iter_1_reg_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal iter_2_fu_138_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_47_fu_185_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal bflyOutData_M_real_V_0_fu_201_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal shl_ln_fu_213_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal r_V_fu_220_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal shl_ln1171_6_fu_236_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal r_V_28_fu_243_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal real1_V_fu_226_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal imag2_V_fu_249_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal bflyOutData_M_real_V_1_fu_259_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal bflyOutData_M_imag_V_0_fu_205_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln174_fu_273_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln712_23_fu_264_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln712_5_fu_269_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln174_fu_277_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln712_fu_209_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_4_fu_281_p7 : STD_LOGIC_VECTOR (121 downto 0);
    signal sext_ln174_1_fu_297_p1 : STD_LOGIC_VECTOR (122 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_89 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln215_reg_341 = ap_const_lv1_0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= real_start;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    iter1_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln215_reg_341 = ap_const_lv1_1))) then 
                iter1_reg_114 <= iter_reg_336;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln215_reg_341 = ap_const_lv1_0)) or (not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                iter1_reg_114 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_nbreadreq_fu_78_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                X_of_ns_M_imag_V_0_reg_318 <= fftOutData_local2_dout(57 downto 32);
                X_of_ns_M_imag_V_1_reg_330 <= fftOutData_local2_dout(121 downto 96);
                X_of_ns_M_real_V_0_reg_312 <= X_of_ns_M_real_V_0_fu_145_p1;
                X_of_ns_M_real_V_1_reg_324 <= fftOutData_local2_dout(89 downto 64);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln215_reg_341 <= icmp_ln215_fu_195_p2;
                tmp_reg_308 <= tmp_nbreadreq_fu_78_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                iter_reg_336 <= iter_fu_179_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_reset_idle_pp0 = ap_const_logic_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    X_of_ns_M_real_V_0_fu_145_p1 <= fftOutData_local2_dout(26 - 1 downto 0);
    add_ln712_23_fu_264_p2 <= std_logic_vector(unsigned(imag2_V_fu_249_p4) + unsigned(X_of_ns_M_imag_V_0_reg_318));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg)
    begin
        if (((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(real_start, ap_done_reg, fftOutData_local2_empty_n, tmp_nbreadreq_fu_78_p3, fftOutData_local_full_n, tmp_reg_308, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_reg_308 = ap_const_lv1_1) and (fftOutData_local_full_n = ap_const_logic_0)) or ((tmp_nbreadreq_fu_78_p3 = ap_const_lv1_1) and (fftOutData_local2_empty_n = ap_const_logic_0) and (real_start = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(real_start, ap_done_reg, fftOutData_local2_empty_n, tmp_nbreadreq_fu_78_p3, fftOutData_local_full_n, tmp_reg_308, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_reg_308 = ap_const_lv1_1) and (fftOutData_local_full_n = ap_const_logic_0)) or ((tmp_nbreadreq_fu_78_p3 = ap_const_lv1_1) and (fftOutData_local2_empty_n = ap_const_logic_0) and (real_start = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(real_start, ap_done_reg, fftOutData_local2_empty_n, tmp_nbreadreq_fu_78_p3, fftOutData_local_full_n, tmp_reg_308, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_reg_308 = ap_const_lv1_1) and (fftOutData_local_full_n = ap_const_logic_0)) or ((tmp_nbreadreq_fu_78_p3 = ap_const_lv1_1) and (fftOutData_local2_empty_n = ap_const_logic_0) and (real_start = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(fftOutData_local2_empty_n, tmp_nbreadreq_fu_78_p3)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((tmp_nbreadreq_fu_78_p3 = ap_const_lv1_1) and (fftOutData_local2_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter1_assign_proc : process(fftOutData_local_full_n, tmp_reg_308)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((tmp_reg_308 = ap_const_lv1_1) and (fftOutData_local_full_n = ap_const_logic_0));
    end process;


    ap_condition_89_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_89 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln215_reg_341)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln215_reg_341 = ap_const_lv1_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= real_start;

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_iter1_phi_fu_118_p6_assign_proc : process(iter1_reg_114, iter_reg_336, icmp_ln215_reg_341, ap_condition_89)
    begin
        if ((ap_const_boolean_1 = ap_condition_89)) then
            if ((icmp_ln215_reg_341 = ap_const_lv1_0)) then 
                ap_phi_mux_iter1_phi_fu_118_p6 <= ap_const_lv32_0;
            elsif ((icmp_ln215_reg_341 = ap_const_lv1_1)) then 
                ap_phi_mux_iter1_phi_fu_118_p6 <= iter_reg_336;
            else 
                ap_phi_mux_iter1_phi_fu_118_p6 <= iter1_reg_114;
            end if;
        else 
            ap_phi_mux_iter1_phi_fu_118_p6 <= iter1_reg_114;
        end if; 
    end process;


    ap_phi_mux_iter_1_phi_fu_131_p4_assign_proc : process(tmp_nbreadreq_fu_78_p3, ap_phi_mux_iter1_phi_fu_118_p6, ap_phi_reg_pp0_iter0_iter_1_reg_128, iter_2_fu_138_p2)
    begin
        if ((tmp_nbreadreq_fu_78_p3 = ap_const_lv1_0)) then 
            ap_phi_mux_iter_1_phi_fu_131_p4 <= iter_2_fu_138_p2;
        elsif ((tmp_nbreadreq_fu_78_p3 = ap_const_lv1_1)) then 
            ap_phi_mux_iter_1_phi_fu_131_p4 <= ap_phi_mux_iter1_phi_fu_118_p6;
        else 
            ap_phi_mux_iter_1_phi_fu_131_p4 <= ap_phi_reg_pp0_iter0_iter_1_reg_128;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_iter_1_reg_128 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_ready <= internal_ap_ready;

    ap_reset_idle_pp0_assign_proc : process(real_start, ap_idle_pp0_0to0)
    begin
        if (((real_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    bflyOutData_M_imag_V_0_fu_205_p2 <= std_logic_vector(unsigned(X_of_ns_M_imag_V_1_reg_330) + unsigned(X_of_ns_M_imag_V_0_reg_318));
    bflyOutData_M_real_V_0_fu_201_p2 <= std_logic_vector(unsigned(X_of_ns_M_real_V_1_reg_324) + unsigned(X_of_ns_M_real_V_0_reg_312));
    bflyOutData_M_real_V_1_fu_259_p2 <= std_logic_vector(unsigned(real1_V_fu_226_p4) + unsigned(X_of_ns_M_real_V_0_reg_312));

    fftOutData_local2_blk_n_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, fftOutData_local2_empty_n, tmp_nbreadreq_fu_78_p3, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_nbreadreq_fu_78_p3 = ap_const_lv1_1) and (real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fftOutData_local2_blk_n <= fftOutData_local2_empty_n;
        else 
            fftOutData_local2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fftOutData_local2_read_assign_proc : process(real_start, ap_CS_fsm_pp0_stage0, tmp_nbreadreq_fu_78_p3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_nbreadreq_fu_78_p3 = ap_const_lv1_1) and (real_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fftOutData_local2_read <= ap_const_logic_1;
        else 
            fftOutData_local2_read <= ap_const_logic_0;
        end if; 
    end process;


    fftOutData_local_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, fftOutData_local_full_n, tmp_reg_308, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_reg_308 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fftOutData_local_blk_n <= fftOutData_local_full_n;
        else 
            fftOutData_local_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fftOutData_local_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln174_1_fu_297_p1),128));

    fftOutData_local_write_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_reg_308, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_reg_308 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fftOutData_local_write <= ap_const_logic_1;
        else 
            fftOutData_local_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln215_fu_195_p2 <= "1" when (signed(tmp_47_fu_185_p4) < signed(ap_const_lv27_1)) else "0";
    imag2_V_fu_249_p4 <= r_V_28_fu_243_p2(38 downto 13);

    internal_ap_ready_assign_proc : process(real_start, icmp_ln215_fu_195_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (real_start = ap_const_logic_1) and (icmp_ln215_fu_195_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    iter_2_fu_138_p2 <= std_logic_vector(unsigned(ap_phi_mux_iter1_phi_fu_118_p6) + unsigned(ap_const_lv32_FFFFFFFF));
    iter_fu_179_p2 <= std_logic_vector(unsigned(ap_phi_mux_iter_1_phi_fu_131_p4) + unsigned(ap_const_lv32_1));
    r_V_28_fu_243_p2 <= std_logic_vector(unsigned(ap_const_lv39_0) - unsigned(shl_ln1171_6_fu_236_p3));
    r_V_fu_220_p2 <= std_logic_vector(unsigned(ap_const_lv39_0) - unsigned(shl_ln_fu_213_p3));
    real1_V_fu_226_p4 <= r_V_fu_220_p2(38 downto 13);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

        sext_ln174_1_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_281_p7),123));

        sext_ln174_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bflyOutData_M_imag_V_0_fu_205_p2),27));

        sext_ln712_5_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bflyOutData_M_real_V_1_fu_259_p2),27));

        sext_ln712_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bflyOutData_M_real_V_0_fu_201_p2),27));

    shl_ln1171_6_fu_236_p3 <= (X_of_ns_M_imag_V_1_reg_330 & ap_const_lv13_0);
    shl_ln_fu_213_p3 <= (X_of_ns_M_real_V_1_reg_324 & ap_const_lv13_0);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_47_fu_185_p4 <= iter_fu_179_p2(31 downto 5);
    tmp_4_fu_281_p7 <= (((((add_ln712_23_fu_264_p2 & ap_const_lv5_0) & sext_ln712_5_fu_269_p1) & zext_ln174_fu_277_p1) & ap_const_lv5_0) & sext_ln712_fu_209_p1);
    tmp_nbreadreq_fu_78_p3 <= (0=>(fftOutData_local2_empty_n), others=>'-');
    zext_ln174_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln174_fu_273_p1),32));
end behav;
