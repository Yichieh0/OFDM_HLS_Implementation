-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft_top1_fftStageKernelS2S_128_2_1_0_0_4_complex_ap_fixed_25_10_5_3_0_complex_ap_fixed_16_3_5_3_0_complex_ap_fixed_16_3_5_3_0_complex_ap_fixed_24_9_5_3_0_complex_ap_fixed_25_10_5_3_0_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fftOutData_local2_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    fftOutData_local2_empty_n : IN STD_LOGIC;
    fftOutData_local2_read : OUT STD_LOGIC;
    fftOutData_local_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    fftOutData_local_full_n : IN STD_LOGIC;
    fftOutData_local_write : OUT STD_LOGIC );
end;


architecture behav of fft_top1_fftStageKernelS2S_128_2_1_0_0_4_complex_ap_fixed_25_10_5_3_0_complex_ap_fixed_16_3_5_3_0_complex_ap_fixed_16_3_5_3_0_complex_ap_fixed_24_9_5_3_0_complex_ap_fixed_25_10_5_3_0_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_20 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv29_1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv37_0 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv14_2000 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal twiddleObj_twiddleTable_M_imag_V_3_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal twiddleObj_twiddleTable_M_imag_V_3_ce0 : STD_LOGIC;
    signal twiddleObj_twiddleTable_M_imag_V_3_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal twiddleObj_twiddleTable_M_imag_V_3_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal twiddleObj_twiddleTable_M_imag_V_3_ce1 : STD_LOGIC;
    signal twiddleObj_twiddleTable_M_imag_V_3_q1 : STD_LOGIC_VECTOR (13 downto 0);
    signal fftOutData_local2_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_nbreadreq_fu_124_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal fftOutData_local_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal tmp_reg_664 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_664_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal k9_reg_182 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_fu_203_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal f_reg_659 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_reg_664_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_664_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal X_of_ns_M_real_V_0_fu_216_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal X_of_ns_M_real_V_0_reg_668 : STD_LOGIC_VECTOR (23 downto 0);
    signal X_of_ns_M_imag_V_0_reg_674 : STD_LOGIC_VECTOR (23 downto 0);
    signal X_of_ns_M_real_V_1_reg_680 : STD_LOGIC_VECTOR (23 downto 0);
    signal X_of_ns_M_imag_V_1_reg_686 : STD_LOGIC_VECTOR (23 downto 0);
    signal output_negate_control_imag_reg_692 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_reg_697 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_10_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_10_reg_702 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_negate_control_real_V_reg_712 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_11_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_11_reg_717 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_12_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_12_reg_722 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_378_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_732 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln151_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln151_reg_737 : STD_LOGIC_VECTOR (0 downto 0);
    signal complexExpMulOut_M_real_V_0_fu_400_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal complexExpMulOut_M_real_V_0_reg_741 : STD_LOGIC_VECTOR (23 downto 0);
    signal complexExpMulOut_M_real_V_0_reg_741_pp0_iter2_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal complexExpMulOut_M_real_V_0_reg_741_pp0_iter3_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal bflyOutData_M_imag_V_0_fu_404_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal bflyOutData_M_imag_V_0_reg_746 : STD_LOGIC_VECTOR (23 downto 0);
    signal bflyOutData_M_imag_V_0_reg_746_pp0_iter2_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal bflyOutData_M_imag_V_0_reg_746_pp0_iter3_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1171_fu_530_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1171_10_fu_534_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1171_11_fu_538_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1171_12_fu_542_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal f10_reg_170 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln149_fu_625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_k9_phi_fu_186_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_k_1_phi_fu_196_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_k_1_reg_193 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_6_fu_209_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln573_fu_322_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln573_4_fu_373_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln177_fu_250_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal index_V_fu_254_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln674_fu_296_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lut_index_imag_V_fu_300_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal index_invert_control_imag_fu_268_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal lut_index_imag_V_7_fu_308_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal lut_index_imag_V_8_fu_314_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal index_cos_V_fu_262_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal lut_index_real_V_fu_355_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal index_invert_control_real_V_fu_327_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal lut_index_real_V_7_fu_359_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal lut_index_real_V_8_fu_365_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_46_fu_384_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal shl_ln_fu_408_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal r_V_fu_415_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal shl_ln1171_4_fu_431_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal r_V_18_fu_438_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal real1_V_16_fu_421_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal imag2_V_20_fu_444_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal output_saturation_control_imag_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_out_sin_V_fu_468_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_20_fu_480_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln755_fu_486_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln116_fu_476_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal output_saturation_control_real_V_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_out_cos_V_fu_501_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_21_fu_513_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln755_4_fu_519_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln133_fu_509_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_19_fu_454_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_23_fu_523_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_20_fu_459_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_s_fu_490_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_631_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal grp_fu_638_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal real1_V_fu_549_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal real2_V_fu_558_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_645_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal grp_fu_652_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal imag2_V_fu_582_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal imag1_V_fu_573_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln174_fu_597_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal imag_out_V_fu_591_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal real_out_V_fu_567_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln174_fu_600_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln712_fu_546_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_5_fu_604_p7 : STD_LOGIC_VECTOR (120 downto 0);
    signal grp_fu_631_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_631_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_638_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_638_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_645_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_645_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_652_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_652_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_631_ce : STD_LOGIC;
    signal grp_fu_638_ce : STD_LOGIC;
    signal grp_fu_645_ce : STD_LOGIC;
    signal grp_fu_652_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fft_top1_mul_mul_24s_15s_38_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (37 downto 0) );
    end component;


    component fft_top1_fftStageKernelS2S_128_2_1_0_0_7_complex_ap_fixed_22_7_5_3_0_complex_ap_fixed_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    twiddleObj_twiddleTable_M_imag_V_3_U : component fft_top1_fftStageKernelS2S_128_2_1_0_0_7_complex_ap_fixed_22_7_5_3_0_complex_ap_fixed_bkb
    generic map (
        DataWidth => 14,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => twiddleObj_twiddleTable_M_imag_V_3_address0,
        ce0 => twiddleObj_twiddleTable_M_imag_V_3_ce0,
        q0 => twiddleObj_twiddleTable_M_imag_V_3_q0,
        address1 => twiddleObj_twiddleTable_M_imag_V_3_address1,
        ce1 => twiddleObj_twiddleTable_M_imag_V_3_ce1,
        q1 => twiddleObj_twiddleTable_M_imag_V_3_q1);

    mul_mul_24s_15s_38_4_1_U110 : component fft_top1_mul_mul_24s_15s_38_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 15,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_631_p0,
        din1 => grp_fu_631_p1,
        ce => grp_fu_631_ce,
        dout => grp_fu_631_p2);

    mul_mul_24s_15s_38_4_1_U111 : component fft_top1_mul_mul_24s_15s_38_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 15,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_638_p0,
        din1 => grp_fu_638_p1,
        ce => grp_fu_638_ce,
        dout => grp_fu_638_p2);

    mul_mul_24s_15s_38_4_1_U112 : component fft_top1_mul_mul_24s_15s_38_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 15,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_645_p0,
        din1 => grp_fu_645_p1,
        ce => grp_fu_645_ce,
        dout => grp_fu_645_p2);

    mul_mul_24s_15s_38_4_1_U113 : component fft_top1_mul_mul_24s_15s_38_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 15,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_652_p0,
        din1 => grp_fu_652_p1,
        ce => grp_fu_652_ce,
        dout => grp_fu_652_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln149_fu_625_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    f10_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln149_fu_625_p2 = ap_const_lv1_0))) then 
                f10_reg_170 <= f_reg_659;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f10_reg_170 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    k9_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln151_reg_737 = ap_const_lv1_1))) then 
                k9_reg_182 <= k_reg_732;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                k9_reg_182 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_nbreadreq_fu_124_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                X_of_ns_M_imag_V_0_reg_674 <= fftOutData_local2_dout(55 downto 32);
                X_of_ns_M_imag_V_1_reg_686 <= fftOutData_local2_dout(119 downto 96);
                X_of_ns_M_real_V_0_reg_668 <= X_of_ns_M_real_V_0_fu_216_p1;
                X_of_ns_M_real_V_1_reg_680 <= fftOutData_local2_dout(87 downto 64);
                icmp_ln1049_10_reg_702 <= icmp_ln1049_10_fu_290_p2;
                icmp_ln1049_11_reg_717 <= icmp_ln1049_11_fu_343_p2;
                icmp_ln1049_12_reg_722 <= icmp_ln1049_12_fu_349_p2;
                icmp_ln1049_reg_697 <= icmp_ln1049_fu_284_p2;
                output_negate_control_imag_reg_692 <= ap_phi_mux_k9_phi_fu_186_p4(3 downto 3);
                output_negate_control_real_V_reg_712 <= index_cos_V_fu_262_p2(6 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_664 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                bflyOutData_M_imag_V_0_reg_746 <= bflyOutData_M_imag_V_0_fu_404_p2;
                complexExpMulOut_M_real_V_0_reg_741 <= complexExpMulOut_M_real_V_0_fu_400_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                bflyOutData_M_imag_V_0_reg_746_pp0_iter2_reg <= bflyOutData_M_imag_V_0_reg_746;
                bflyOutData_M_imag_V_0_reg_746_pp0_iter3_reg <= bflyOutData_M_imag_V_0_reg_746_pp0_iter2_reg;
                complexExpMulOut_M_real_V_0_reg_741_pp0_iter2_reg <= complexExpMulOut_M_real_V_0_reg_741;
                complexExpMulOut_M_real_V_0_reg_741_pp0_iter3_reg <= complexExpMulOut_M_real_V_0_reg_741_pp0_iter2_reg;
                tmp_reg_664_pp0_iter2_reg <= tmp_reg_664_pp0_iter1_reg;
                tmp_reg_664_pp0_iter3_reg <= tmp_reg_664_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                f_reg_659 <= f_fu_203_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln151_reg_737 <= icmp_ln151_fu_394_p2;
                tmp_reg_664 <= tmp_nbreadreq_fu_124_p3;
                tmp_reg_664_pp0_iter1_reg <= tmp_reg_664;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                k_reg_732 <= k_fu_378_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter3, ap_CS_fsm_state8, icmp_ln149_fu_625_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln149_fu_625_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    X_of_ns_M_real_V_0_fu_216_p1 <= fftOutData_local2_dout(24 - 1 downto 0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state8 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(fftOutData_local2_empty_n, fftOutData_local_full_n, ap_enable_reg_pp0_iter0, tmp_nbreadreq_fu_124_p3, ap_enable_reg_pp0_iter4, tmp_reg_664_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((tmp_reg_664_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (fftOutData_local_full_n = ap_const_logic_0)) or ((tmp_nbreadreq_fu_124_p3 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (fftOutData_local2_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(fftOutData_local2_empty_n, fftOutData_local_full_n, ap_enable_reg_pp0_iter0, tmp_nbreadreq_fu_124_p3, ap_enable_reg_pp0_iter4, tmp_reg_664_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((tmp_reg_664_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (fftOutData_local_full_n = ap_const_logic_0)) or ((tmp_nbreadreq_fu_124_p3 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (fftOutData_local2_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(fftOutData_local2_empty_n, fftOutData_local_full_n, ap_enable_reg_pp0_iter0, tmp_nbreadreq_fu_124_p3, ap_enable_reg_pp0_iter4, tmp_reg_664_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((tmp_reg_664_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (fftOutData_local_full_n = ap_const_logic_0)) or ((tmp_nbreadreq_fu_124_p3 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (fftOutData_local2_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state3_pp0_stage0_iter0_assign_proc : process(fftOutData_local2_empty_n, tmp_nbreadreq_fu_124_p3)
    begin
                ap_block_state3_pp0_stage0_iter0 <= ((tmp_nbreadreq_fu_124_p3 = ap_const_lv1_1) and (fftOutData_local2_empty_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter4_assign_proc : process(fftOutData_local_full_n, tmp_reg_664_pp0_iter3_reg)
    begin
                ap_block_state7_pp0_stage0_iter4 <= ((tmp_reg_664_pp0_iter3_reg = ap_const_lv1_1) and (fftOutData_local_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln151_fu_394_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln151_fu_394_p2 = ap_const_lv1_0))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state8, icmp_ln149_fu_625_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln149_fu_625_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_k9_phi_fu_186_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, k9_reg_182, k_reg_732, icmp_ln151_reg_737, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln151_reg_737 = ap_const_lv1_1))) then 
            ap_phi_mux_k9_phi_fu_186_p4 <= k_reg_732;
        else 
            ap_phi_mux_k9_phi_fu_186_p4 <= k9_reg_182;
        end if; 
    end process;


    ap_phi_mux_k_1_phi_fu_196_p4_assign_proc : process(tmp_nbreadreq_fu_124_p3, ap_phi_mux_k9_phi_fu_186_p4, ap_phi_reg_pp0_iter0_k_1_reg_193, k_6_fu_209_p2)
    begin
        if ((tmp_nbreadreq_fu_124_p3 = ap_const_lv1_0)) then 
            ap_phi_mux_k_1_phi_fu_196_p4 <= k_6_fu_209_p2;
        elsif ((tmp_nbreadreq_fu_124_p3 = ap_const_lv1_1)) then 
            ap_phi_mux_k_1_phi_fu_196_p4 <= ap_phi_mux_k9_phi_fu_186_p4;
        else 
            ap_phi_mux_k_1_phi_fu_196_p4 <= ap_phi_reg_pp0_iter0_k_1_reg_193;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_k_1_reg_193 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(ap_CS_fsm_state8, icmp_ln149_fu_625_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln149_fu_625_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bflyOutData_M_imag_V_0_fu_404_p2 <= std_logic_vector(unsigned(X_of_ns_M_imag_V_1_reg_686) + unsigned(X_of_ns_M_imag_V_0_reg_674));
    complexExpMulOut_M_real_V_0_fu_400_p2 <= std_logic_vector(unsigned(X_of_ns_M_real_V_1_reg_680) + unsigned(X_of_ns_M_real_V_0_reg_668));
    f_fu_203_p2 <= std_logic_vector(unsigned(f10_reg_170) + unsigned(ap_const_lv3_1));

    fftOutData_local2_blk_n_assign_proc : process(fftOutData_local2_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, tmp_nbreadreq_fu_124_p3)
    begin
        if (((tmp_nbreadreq_fu_124_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fftOutData_local2_blk_n <= fftOutData_local2_empty_n;
        else 
            fftOutData_local2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fftOutData_local2_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_nbreadreq_fu_124_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_nbreadreq_fu_124_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fftOutData_local2_read <= ap_const_logic_1;
        else 
            fftOutData_local2_read <= ap_const_logic_0;
        end if; 
    end process;


    fftOutData_local_blk_n_assign_proc : process(fftOutData_local_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, tmp_reg_664_pp0_iter3_reg)
    begin
        if (((tmp_reg_664_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            fftOutData_local_blk_n <= fftOutData_local_full_n;
        else 
            fftOutData_local_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fftOutData_local_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_604_p7),128));

    fftOutData_local_write_assign_proc : process(ap_enable_reg_pp0_iter4, tmp_reg_664_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_reg_664_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fftOutData_local_write <= ap_const_logic_1;
        else 
            fftOutData_local_write <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_631_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_631_ce <= ap_const_logic_1;
        else 
            grp_fu_631_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_631_p0 <= sext_ln1171_fu_530_p1(24 - 1 downto 0);
    grp_fu_631_p1 <= sext_ln1171_10_fu_534_p1(15 - 1 downto 0);

    grp_fu_638_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_638_ce <= ap_const_logic_1;
        else 
            grp_fu_638_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_638_p0 <= sext_ln1171_11_fu_538_p1(24 - 1 downto 0);
    grp_fu_638_p1 <= sext_ln1171_12_fu_542_p1(15 - 1 downto 0);

    grp_fu_645_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_645_ce <= ap_const_logic_1;
        else 
            grp_fu_645_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_645_p0 <= sext_ln1171_fu_530_p1(24 - 1 downto 0);
    grp_fu_645_p1 <= sext_ln1171_12_fu_542_p1(15 - 1 downto 0);

    grp_fu_652_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_652_ce <= ap_const_logic_1;
        else 
            grp_fu_652_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_652_p0 <= sext_ln1171_11_fu_538_p1(24 - 1 downto 0);
    grp_fu_652_p1 <= sext_ln1171_10_fu_534_p1(15 - 1 downto 0);
    icmp_ln1049_10_fu_290_p2 <= "1" when (trunc_ln177_fu_250_p1 = ap_const_lv4_C) else "0";
    icmp_ln1049_11_fu_343_p2 <= "1" when (index_cos_V_fu_262_p2 = ap_const_lv7_20) else "0";
    icmp_ln1049_12_fu_349_p2 <= "1" when (trunc_ln177_fu_250_p1 = ap_const_lv4_0) else "0";
    icmp_ln1049_fu_284_p2 <= "1" when (trunc_ln177_fu_250_p1 = ap_const_lv4_4) else "0";
    icmp_ln149_fu_625_p2 <= "1" when (f10_reg_170 = ap_const_lv3_7) else "0";
    icmp_ln151_fu_394_p2 <= "1" when (signed(tmp_46_fu_384_p4) < signed(ap_const_lv29_1)) else "0";
    imag1_V_fu_573_p4 <= grp_fu_645_p2(37 downto 13);
    imag2_V_20_fu_444_p4 <= r_V_18_fu_438_p2(36 downto 13);
    imag2_V_fu_582_p4 <= grp_fu_652_p2(37 downto 13);
    imag_out_V_fu_591_p2 <= std_logic_vector(unsigned(imag2_V_fu_582_p4) + unsigned(imag1_V_fu_573_p4));
    index_V_fu_254_p3 <= (trunc_ln177_fu_250_p1 & ap_const_lv3_0);
    index_cos_V_fu_262_p2 <= std_logic_vector(unsigned(index_V_fu_254_p3) + unsigned(ap_const_lv7_60));
    index_invert_control_imag_fu_268_p3 <= ap_phi_mux_k9_phi_fu_186_p4(2 downto 2);
    index_invert_control_real_V_fu_327_p3 <= index_cos_V_fu_262_p2(5 downto 5);
    k_6_fu_209_p2 <= std_logic_vector(unsigned(ap_phi_mux_k9_phi_fu_186_p4) + unsigned(ap_const_lv32_FFFFFFFF));
    k_fu_378_p2 <= std_logic_vector(unsigned(ap_phi_mux_k_1_phi_fu_196_p4) + unsigned(ap_const_lv32_1));
    lut_index_imag_V_7_fu_308_p2 <= std_logic_vector(unsigned(ap_const_lv5_0) - unsigned(lut_index_imag_V_fu_300_p3));
    lut_index_imag_V_8_fu_314_p3 <= 
        lut_index_imag_V_7_fu_308_p2 when (index_invert_control_imag_fu_268_p3(0) = '1') else 
        lut_index_imag_V_fu_300_p3;
    lut_index_imag_V_fu_300_p3 <= (trunc_ln674_fu_296_p1 & ap_const_lv3_0);
    lut_index_real_V_7_fu_359_p2 <= std_logic_vector(unsigned(ap_const_lv5_0) - unsigned(lut_index_real_V_fu_355_p1));
    lut_index_real_V_8_fu_365_p3 <= 
        lut_index_real_V_7_fu_359_p2 when (index_invert_control_real_V_fu_327_p3(0) = '1') else 
        lut_index_real_V_fu_355_p1;
    lut_index_real_V_fu_355_p1 <= index_cos_V_fu_262_p2(5 - 1 downto 0);
    output_saturation_control_imag_fu_464_p2 <= (icmp_ln1049_reg_697 or icmp_ln1049_10_reg_702);
    output_saturation_control_real_V_fu_497_p2 <= (icmp_ln1049_12_reg_722 or icmp_ln1049_11_reg_717);
    p_Val2_20_fu_480_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(temp_out_sin_V_fu_468_p3));
    p_Val2_21_fu_513_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(temp_out_cos_V_fu_501_p3));
    p_Val2_23_fu_523_p3 <= 
        zext_ln755_4_fu_519_p1 when (output_negate_control_real_V_reg_712(0) = '1') else 
        sext_ln133_fu_509_p1;
    p_Val2_s_fu_490_p3 <= 
        zext_ln755_fu_486_p1 when (output_negate_control_imag_reg_692(0) = '1') else 
        sext_ln116_fu_476_p1;
    r_V_18_fu_438_p2 <= std_logic_vector(unsigned(ap_const_lv37_0) - unsigned(shl_ln1171_4_fu_431_p3));
    r_V_19_fu_454_p2 <= std_logic_vector(unsigned(real1_V_16_fu_421_p4) + unsigned(X_of_ns_M_real_V_0_reg_668));
    r_V_20_fu_459_p2 <= std_logic_vector(unsigned(imag2_V_20_fu_444_p4) + unsigned(X_of_ns_M_imag_V_0_reg_674));
    r_V_fu_415_p2 <= std_logic_vector(unsigned(ap_const_lv37_0) - unsigned(shl_ln_fu_408_p3));
    real1_V_16_fu_421_p4 <= r_V_fu_415_p2(36 downto 13);
    real1_V_fu_549_p4 <= grp_fu_631_p2(37 downto 13);
    real2_V_fu_558_p4 <= grp_fu_638_p2(37 downto 13);
    real_out_V_fu_567_p2 <= std_logic_vector(unsigned(real1_V_fu_549_p4) - unsigned(real2_V_fu_558_p4));
        sext_ln116_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_out_sin_V_fu_468_p3),15));

        sext_ln1171_10_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_23_fu_523_p3),38));

        sext_ln1171_11_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_20_fu_459_p2),38));

        sext_ln1171_12_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_fu_490_p3),38));

        sext_ln1171_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_19_fu_454_p2),38));

        sext_ln133_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_out_cos_V_fu_501_p3),15));

        sext_ln174_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bflyOutData_M_imag_V_0_reg_746_pp0_iter3_reg),25));

        sext_ln712_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(complexExpMulOut_M_real_V_0_reg_741_pp0_iter3_reg),25));

    shl_ln1171_4_fu_431_p3 <= (X_of_ns_M_imag_V_1_reg_686 & ap_const_lv13_0);
    shl_ln_fu_408_p3 <= (X_of_ns_M_real_V_1_reg_680 & ap_const_lv13_0);
    temp_out_cos_V_fu_501_p3 <= 
        ap_const_lv14_2000 when (output_saturation_control_real_V_fu_497_p2(0) = '1') else 
        twiddleObj_twiddleTable_M_imag_V_3_q0;
    temp_out_sin_V_fu_468_p3 <= 
        ap_const_lv14_2000 when (output_saturation_control_imag_fu_464_p2(0) = '1') else 
        twiddleObj_twiddleTable_M_imag_V_3_q1;
    tmp_46_fu_384_p4 <= k_fu_378_p2(31 downto 3);
    tmp_5_fu_604_p7 <= (((((imag_out_V_fu_591_p2 & ap_const_lv7_0) & real_out_V_fu_567_p2) & zext_ln174_fu_600_p1) & ap_const_lv7_0) & sext_ln712_fu_546_p1);
    tmp_nbreadreq_fu_124_p3 <= (0=>(fftOutData_local2_empty_n), others=>'-');
    trunc_ln177_fu_250_p1 <= ap_phi_mux_k9_phi_fu_186_p4(4 - 1 downto 0);
    trunc_ln674_fu_296_p1 <= ap_phi_mux_k9_phi_fu_186_p4(2 - 1 downto 0);
    twiddleObj_twiddleTable_M_imag_V_3_address0 <= zext_ln573_4_fu_373_p1(5 - 1 downto 0);
    twiddleObj_twiddleTable_M_imag_V_3_address1 <= zext_ln573_fu_322_p1(5 - 1 downto 0);

    twiddleObj_twiddleTable_M_imag_V_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            twiddleObj_twiddleTable_M_imag_V_3_ce0 <= ap_const_logic_1;
        else 
            twiddleObj_twiddleTable_M_imag_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    twiddleObj_twiddleTable_M_imag_V_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            twiddleObj_twiddleTable_M_imag_V_3_ce1 <= ap_const_logic_1;
        else 
            twiddleObj_twiddleTable_M_imag_V_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln174_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln174_fu_597_p1),32));
    zext_ln573_4_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lut_index_real_V_8_fu_365_p3),64));
    zext_ln573_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lut_index_imag_V_8_fu_314_p3),64));
    zext_ln755_4_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_21_fu_513_p2),15));
    zext_ln755_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_20_fu_480_p2),15));
end behav;
