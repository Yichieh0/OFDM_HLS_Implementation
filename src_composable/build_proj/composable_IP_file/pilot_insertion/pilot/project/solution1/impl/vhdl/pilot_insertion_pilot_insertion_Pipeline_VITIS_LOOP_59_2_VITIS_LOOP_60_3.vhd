-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pilot_insertion_pilot_insertion_Pipeline_VITIS_LOOP_59_2_VITIS_LOOP_60_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_in_TVALID : IN STD_LOGIC;
    data_out_TREADY : IN STD_LOGIC;
    bound : IN STD_LOGIC_VECTOR (37 downto 0);
    data_out_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    data_out_TVALID : OUT STD_LOGIC;
    data_out_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_out_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    data_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    data_out_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    data_out_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    pilot_width_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    data_in_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    data_in_TREADY : OUT STD_LOGIC;
    data_in_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    data_in_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    data_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    data_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    data_in_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    data_in_TDEST : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of pilot_insertion_pilot_insertion_Pipeline_VITIS_LOOP_59_2_VITIS_LOOP_60_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv38_0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv38_1 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv71_A1E8CFBE3 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000101000011110100011001111101111100011";
    constant ap_const_lv71_0 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal icmp_ln61_reg_632 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state14_io : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln59_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal data_out_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal data_in_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln61_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_fu_118 : STD_LOGIC_VECTOR (6 downto 0);
    signal t_3_fu_273_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal indvar_flatten_fu_122 : STD_LOGIC_VECTOR (37 downto 0);
    signal add_ln59_fu_241_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal p_Val2_2_fu_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_fu_491_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_3_fu_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_fu_479_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_528_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_1_fu_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_fu_540_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_5_fu_503_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal p_Result_2_fu_552_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln60_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln14_fu_256_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_268_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_268_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln61_fu_289_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_309_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal t_1_fu_319_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal mul_ln1201_fu_331_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal mul_ln1201_fu_331_p2 : STD_LOGIC_VECTOR (70 downto 0);
    signal sub_ln1201_fu_337_p2 : STD_LOGIC_VECTOR (70 downto 0);
    signal tmp_2_fu_343_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_351_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_4_fu_361_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal select_ln1201_fu_371_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln1201_1_fu_379_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln1201_1_fu_383_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln737_fu_397_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal t_2_fu_401_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal mul_ln1201_1_fu_413_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal mul_ln1201_1_fu_413_p2 : STD_LOGIC_VECTOR (70 downto 0);
    signal sub_ln1201_2_fu_419_p2 : STD_LOGIC_VECTOR (70 downto 0);
    signal tmp_5_fu_425_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_433_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_7_fu_443_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal select_ln1201_2_fu_453_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln1201_3_fu_461_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln1201_3_fu_465_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal select_ln1201_1_fu_389_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal select_ln1201_3_fu_471_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_268_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_268_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component pilot_insertion_srem_8ns_32ns_8_12_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component pilot_insertion_mul_35s_37ns_71_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (34 downto 0);
        din1 : IN STD_LOGIC_VECTOR (36 downto 0);
        dout : OUT STD_LOGIC_VECTOR (70 downto 0) );
    end component;


    component pilot_insertion_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    srem_8ns_32ns_8_12_1_U18 : component pilot_insertion_srem_8ns_32ns_8_12_1
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 8,
        din1_WIDTH => 32,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_268_p0,
        din1 => pilot_width_3_reload,
        ce => grp_fu_268_ce,
        dout => grp_fu_268_p2);

    mul_35s_37ns_71_1_1_U19 : component pilot_insertion_mul_35s_37ns_71_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 35,
        din1_WIDTH => 37,
        dout_WIDTH => 71)
    port map (
        din0 => t_1_fu_319_p3,
        din1 => mul_ln1201_fu_331_p1,
        dout => mul_ln1201_fu_331_p2);

    mul_35s_37ns_71_1_1_U20 : component pilot_insertion_mul_35s_37ns_71_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 35,
        din1_WIDTH => 37,
        dout_WIDTH => 71)
    port map (
        din0 => t_2_fu_401_p3,
        din1 => mul_ln1201_1_fu_413_p1,
        dout => mul_ln1201_1_fu_413_p2);

    flow_control_loop_pipe_sequential_init_U : component pilot_insertion_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_122 <= ap_const_lv38_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln59_fu_236_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_122 <= add_ln59_fu_241_p2;
                end if;
            end if; 
        end if;
    end process;

    p_Val2_1_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    p_Val2_1_fu_138 <= ap_const_lv32_0;
                elsif (((icmp_ln61_reg_632 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))) then 
                    p_Val2_1_fu_138 <= p_Result_1_fu_540_p5;
                end if;
            end if; 
        end if;
    end process;

    p_Val2_2_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    p_Val2_2_fu_126 <= ap_const_lv32_0;
                elsif (((icmp_ln61_reg_632 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))) then 
                    p_Val2_2_fu_126 <= p_Result_4_fu_491_p5;
                end if;
            end if; 
        end if;
    end process;

    p_Val2_3_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    p_Val2_3_fu_130 <= ap_const_lv32_0;
                elsif (((icmp_ln61_reg_632 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))) then 
                    p_Val2_3_fu_130 <= p_Result_3_fu_479_p5;
                end if;
            end if; 
        end if;
    end process;

    p_Val2_s_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    p_Val2_s_fu_134 <= ap_const_lv32_0;
                elsif (((icmp_ln61_reg_632 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))) then 
                    p_Val2_s_fu_134 <= p_Result_s_fu_528_p5;
                end if;
            end if; 
        end if;
    end process;

    t_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    t_fu_118 <= ap_const_lv7_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln59_fu_236_p2 = ap_const_lv1_0))) then 
                    t_fu_118 <= t_3_fu_273_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln61_reg_632 <= icmp_ln61_fu_293_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln59_fu_241_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_122) + unsigned(ap_const_lv38_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter13, data_in_TVALID, icmp_ln61_reg_632, data_out_TREADY)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (((data_out_TREADY = ap_const_logic_0) and (icmp_ln61_reg_632 = ap_const_lv1_1)) or ((data_out_TREADY = ap_const_logic_0) and (icmp_ln61_reg_632 = ap_const_lv1_0)) or ((icmp_ln61_reg_632 = ap_const_lv1_0) and (data_in_TVALID = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter13, data_in_TVALID, icmp_ln61_reg_632, data_out_TREADY, ap_block_state14_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state14_io) or ((data_out_TREADY = ap_const_logic_0) and (icmp_ln61_reg_632 = ap_const_lv1_1)) or ((data_out_TREADY = ap_const_logic_0) and (icmp_ln61_reg_632 = ap_const_lv1_0)) or ((icmp_ln61_reg_632 = ap_const_lv1_0) and (data_in_TVALID = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter13, data_in_TVALID, icmp_ln61_reg_632, data_out_TREADY, ap_block_state14_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state14_io) or ((data_out_TREADY = ap_const_logic_0) and (icmp_ln61_reg_632 = ap_const_lv1_1)) or ((data_out_TREADY = ap_const_logic_0) and (icmp_ln61_reg_632 = ap_const_lv1_0)) or ((icmp_ln61_reg_632 = ap_const_lv1_0) and (data_in_TVALID = ap_const_logic_0))));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_io_assign_proc : process(icmp_ln61_reg_632, data_out_TREADY)
    begin
                ap_block_state14_io <= (((data_out_TREADY = ap_const_logic_0) and (icmp_ln61_reg_632 = ap_const_lv1_1)) or ((data_out_TREADY = ap_const_logic_0) and (icmp_ln61_reg_632 = ap_const_lv1_0)));
    end process;


    ap_block_state14_pp0_stage0_iter13_assign_proc : process(data_in_TVALID, icmp_ln61_reg_632, data_out_TREADY)
    begin
                ap_block_state14_pp0_stage0_iter13 <= (((data_out_TREADY = ap_const_logic_0) and (icmp_ln61_reg_632 = ap_const_lv1_1)) or ((data_out_TREADY = ap_const_logic_0) and (icmp_ln61_reg_632 = ap_const_lv1_0)) or ((icmp_ln61_reg_632 = ap_const_lv1_0) and (data_in_TVALID = ap_const_logic_0)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln59_fu_236_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln59_fu_236_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter12_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    data_in_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter13, data_in_TVALID, icmp_ln61_reg_632, ap_block_pp0_stage0)
    begin
        if (((icmp_ln61_reg_632 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_in_TDATA_blk_n <= data_in_TVALID;
        else 
            data_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_in_TREADY_assign_proc : process(ap_enable_reg_pp0_iter13, icmp_ln61_reg_632, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln61_reg_632 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_in_TREADY <= ap_const_logic_1;
        else 
            data_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    data_out_TDATA_assign_proc : process(ap_enable_reg_pp0_iter13, icmp_ln61_reg_632, p_Result_5_fu_503_p3, ap_block_pp0_stage0_01001, p_Result_2_fu_552_p3)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then
            if ((icmp_ln61_reg_632 = ap_const_lv1_1)) then 
                data_out_TDATA <= p_Result_2_fu_552_p3;
            elsif ((icmp_ln61_reg_632 = ap_const_lv1_0)) then 
                data_out_TDATA <= p_Result_5_fu_503_p3;
            else 
                data_out_TDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            data_out_TDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_out_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter13, icmp_ln61_reg_632, data_out_TREADY, ap_block_pp0_stage0)
    begin
        if ((((icmp_ln61_reg_632 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((icmp_ln61_reg_632 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            data_out_TDATA_blk_n <= data_out_TREADY;
        else 
            data_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_out_TDEST <= ap_const_lv1_0;
    data_out_TID <= ap_const_lv1_0;
    data_out_TKEEP <= ap_const_lv8_0;
    data_out_TLAST <= ap_const_lv1_0;
    data_out_TSTRB <= ap_const_lv8_0;
    data_out_TUSER <= ap_const_lv1_0;

    data_out_TVALID_assign_proc : process(ap_enable_reg_pp0_iter13, icmp_ln61_reg_632, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln61_reg_632 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln61_reg_632 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            data_out_TVALID <= ap_const_logic_1;
        else 
            data_out_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_268_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_268_ce <= ap_const_logic_1;
        else 
            grp_fu_268_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_268_p0 <= grp_fu_268_p00(8 - 1 downto 0);
    grp_fu_268_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_fu_256_p3),32));
    icmp_ln59_fu_236_p2 <= "1" when (indvar_flatten_fu_122 = bound) else "0";
    icmp_ln60_fu_250_p2 <= "1" when (t_fu_118 = ap_const_lv7_40) else "0";
    icmp_ln61_fu_293_p2 <= "1" when (trunc_ln61_fu_289_p1 = ap_const_lv8_0) else "0";
    mul_ln1201_1_fu_413_p1 <= ap_const_lv71_A1E8CFBE3(37 - 1 downto 0);
    mul_ln1201_fu_331_p1 <= ap_const_lv71_A1E8CFBE3(37 - 1 downto 0);
    p_Result_1_fu_540_p5 <= (p_Val2_1_fu_138(31 downto 20) & ap_const_lv5_0 & p_Val2_1_fu_138(14 downto 0));
    p_Result_2_fu_552_p3 <= (p_Result_s_fu_528_p5 & p_Result_1_fu_540_p5);
    p_Result_3_fu_479_p5 <= (p_Val2_3_fu_130(31 downto 20) & select_ln1201_1_fu_389_p3);
    p_Result_4_fu_491_p5 <= (p_Val2_2_fu_126(31 downto 20) & select_ln1201_3_fu_471_p3);
    p_Result_5_fu_503_p3 <= (p_Result_3_fu_479_p5 & p_Result_4_fu_491_p5);
    p_Result_s_fu_528_p5 <= (p_Val2_s_fu_134(31 downto 20) & ap_const_lv5_1 & p_Val2_s_fu_134(14 downto 0));
    select_ln1201_1_fu_389_p3 <= 
        sub_ln1201_1_fu_383_p2 when (tmp_2_fu_343_p3(0) = '1') else 
        sext_ln1201_1_fu_379_p1;
    select_ln1201_2_fu_453_p3 <= 
        tmp_6_fu_433_p4 when (tmp_5_fu_425_p3(0) = '1') else 
        tmp_7_fu_443_p4;
    select_ln1201_3_fu_471_p3 <= 
        sub_ln1201_3_fu_465_p2 when (tmp_5_fu_425_p3(0) = '1') else 
        sext_ln1201_3_fu_461_p1;
    select_ln1201_fu_371_p3 <= 
        tmp_3_fu_351_p4 when (tmp_2_fu_343_p3(0) = '1') else 
        tmp_4_fu_361_p4;
    select_ln14_fu_256_p3 <= 
        ap_const_lv7_0 when (icmp_ln60_fu_250_p2(0) = '1') else 
        t_fu_118;
        sext_ln1201_1_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln1201_fu_371_p3),20));

        sext_ln1201_3_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln1201_2_fu_453_p3),20));

    sub_ln1201_1_fu_383_p2 <= std_logic_vector(unsigned(ap_const_lv20_0) - unsigned(sext_ln1201_1_fu_379_p1));
    sub_ln1201_2_fu_419_p2 <= std_logic_vector(unsigned(ap_const_lv71_0) - unsigned(mul_ln1201_1_fu_413_p2));
    sub_ln1201_3_fu_465_p2 <= std_logic_vector(unsigned(ap_const_lv20_0) - unsigned(sext_ln1201_3_fu_461_p1));
    sub_ln1201_fu_337_p2 <= std_logic_vector(unsigned(ap_const_lv71_0) - unsigned(mul_ln1201_fu_331_p2));
    t_1_fu_319_p3 <= (tmp_s_fu_309_p4 & ap_const_lv15_0);
    t_2_fu_401_p3 <= (trunc_ln737_fu_397_p1 & ap_const_lv15_0);
    t_3_fu_273_p2 <= std_logic_vector(unsigned(select_ln14_fu_256_p3) + unsigned(ap_const_lv7_1));
    tmp_2_fu_343_p3 <= data_in_TDATA(51 downto 51);
    tmp_3_fu_351_p4 <= sub_ln1201_fu_337_p2(70 downto 52);
    tmp_4_fu_361_p4 <= mul_ln1201_fu_331_p2(70 downto 52);
    tmp_5_fu_425_p3 <= data_in_TDATA(19 downto 19);
    tmp_6_fu_433_p4 <= sub_ln1201_2_fu_419_p2(70 downto 52);
    tmp_7_fu_443_p4 <= mul_ln1201_1_fu_413_p2(70 downto 52);
    tmp_s_fu_309_p4 <= data_in_TDATA(51 downto 32);
    trunc_ln61_fu_289_p1 <= grp_fu_268_p2(8 - 1 downto 0);
    trunc_ln737_fu_397_p1 <= data_in_TDATA(20 - 1 downto 0);
end behav;
