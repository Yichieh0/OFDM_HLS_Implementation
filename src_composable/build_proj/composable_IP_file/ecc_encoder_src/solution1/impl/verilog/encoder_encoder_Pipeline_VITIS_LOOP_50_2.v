// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module encoder_encoder_Pipeline_VITIS_LOOP_50_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_in_TVALID,
        data_out_TREADY,
        s_V_load,
        add,
        data_out_TDATA,
        data_out_TVALID,
        data_out_TKEEP,
        data_out_TSTRB,
        data_out_TLAST,
        mul,
        data_in_TDATA,
        data_in_TREADY,
        data_in_TKEEP,
        data_in_TSTRB,
        data_in_TLAST,
        part_set_i_i_lcssa276_out,
        part_set_i_i_lcssa276_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   data_in_TVALID;
input   data_out_TREADY;
input  [5:0] s_V_load;
input  [30:0] add;
output  [63:0] data_out_TDATA;
output   data_out_TVALID;
output  [7:0] data_out_TKEEP;
output  [7:0] data_out_TSTRB;
output  [0:0] data_out_TLAST;
input  [31:0] mul;
input  [63:0] data_in_TDATA;
output   data_in_TREADY;
input  [7:0] data_in_TKEEP;
input  [7:0] data_in_TSTRB;
input  [0:0] data_in_TLAST;
output  [5:0] part_set_i_i_lcssa276_out;
output   part_set_i_i_lcssa276_out_ap_vld;

reg ap_idle;
reg data_out_TVALID;
reg data_in_TREADY;
reg part_set_i_i_lcssa276_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire   [0:0] icmp_ln50_fu_186_p2;
wire   [0:0] icmp_ln51_fu_202_p2;
wire   [0:0] empty_11_fu_198_p1;
reg    ap_predicate_op39_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    data_out_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    data_in_TDATA_blk_n;
reg   [0:0] empty_11_reg_526;
reg    ap_block_pp0_stage0_11001;
reg   [30:0] i_fu_92;
wire    ap_loop_init;
reg   [30:0] ap_sig_allocacmp_i_1;
wire   [30:0] i_2_fu_192_p2;
reg   [5:0] part_set_i_i_lcssa276_fu_96;
wire   [5:0] p_Result_6_1_fu_459_p4;
reg   [0:0] data_in_axiu_last_V_fu_100;
reg   [7:0] data_in_axiu_strb_V_fu_104;
reg   [7:0] data_in_axiu_keep_V_fu_108;
reg   [63:0] data_in_temp_V_fu_112;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] i_cast18_fu_182_p1;
wire   [1:0] mul1_fu_272_p3;
wire   [63:0] zext_ln61_fu_279_p1;
wire   [0:0] tmp_4_fu_299_p3;
wire   [0:0] tmp_fu_291_p3;
wire   [0:0] tmp_6_fu_315_p3;
wire   [0:0] p_Result_3_fu_283_p3;
wire   [0:0] xor_ln844_5_fu_329_p2;
wire   [0:0] tmp_5_fu_307_p3;
wire   [0:0] xor_ln844_6_fu_335_p2;
wire   [0:0] xor_ln844_4_fu_323_p2;
wire   [0:0] trunc_ln63_fu_347_p1;
wire   [0:0] xor_ln844_8_fu_357_p2;
wire   [0:0] xor_ln844_9_fu_363_p2;
wire   [0:0] xor_ln844_7_fu_351_p2;
wire   [1:0] or_ln62_fu_375_p2;
wire   [63:0] zext_ln819_fu_381_p1;
wire   [0:0] tmp_7_fu_393_p3;
wire   [0:0] p_Result_3_1_fu_385_p3;
wire   [0:0] xor_ln844_11_fu_407_p2;
wire   [0:0] xor_ln844_12_fu_413_p2;
wire   [0:0] xor_ln844_10_fu_401_p2;
wire   [0:0] xor_ln844_13_fu_425_p2;
wire   [0:0] xor_ln844_14_fu_431_p2;
wire   [0:0] xor_ln844_3_fu_437_p2;
wire   [0:0] xor_ln844_2_fu_419_p2;
wire   [0:0] xor_ln844_1_fu_369_p2;
wire   [0:0] xor_ln844_fu_341_p2;
wire   [3:0] trunc_ln1676_fu_455_p1;
wire   [3:0] data_in_axiu_data_V_fu_443_p5;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_107;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

encoder_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_107)) begin
        if (((empty_11_fu_198_p1 == 1'd0) & (icmp_ln51_fu_202_p2 == 1'd1))) begin
            data_in_temp_V_fu_112 <= data_in_TDATA;
        end else if ((icmp_ln51_fu_202_p2 == 1'd0)) begin
            data_in_temp_V_fu_112 <= 64'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln50_fu_186_p2 == 1'd0) & (ap_start_int == 1'b1))) begin
            i_fu_92 <= i_2_fu_192_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_92 <= 31'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            part_set_i_i_lcssa276_fu_96 <= s_V_load;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            part_set_i_i_lcssa276_fu_96 <= p_Result_6_1_fu_459_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_11_fu_198_p1 == 1'd0) & (icmp_ln51_fu_202_p2 == 1'd1) & (icmp_ln50_fu_186_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_in_axiu_keep_V_fu_108 <= data_in_TKEEP;
        data_in_axiu_last_V_fu_100 <= data_in_TLAST;
        data_in_axiu_strb_V_fu_104 <= data_in_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln50_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_11_reg_526 <= empty_11_fu_198_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln50_fu_186_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 31'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_92;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op39_read_state1 == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_in_TDATA_blk_n = data_in_TVALID;
    end else begin
        data_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op39_read_state1 == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_in_TREADY = 1'b1;
    end else begin
        data_in_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_out_TDATA_blk_n = data_out_TREADY;
    end else begin
        data_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_out_TVALID = 1'b1;
    end else begin
        data_out_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln50_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        part_set_i_i_lcssa276_out_ap_vld = 1'b1;
    end else begin
        part_set_i_i_lcssa276_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((data_out_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_predicate_op39_read_state1 == 1'b1) & (data_in_TVALID == 1'b0) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((data_out_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_predicate_op39_read_state1 == 1'b1) & (data_in_TVALID == 1'b0) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((data_out_TREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_predicate_op39_read_state1 == 1'b1) & (data_in_TVALID == 1'b0) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_predicate_op39_read_state1 == 1'b1) & (data_in_TVALID == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (data_out_TREADY == 1'b0);
end

always @ (*) begin
    ap_condition_107 = ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln50_fu_186_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op39_read_state1 = ((empty_11_fu_198_p1 == 1'd0) & (icmp_ln51_fu_202_p2 == 1'd1) & (icmp_ln50_fu_186_p2 == 1'd0));
end

assign data_in_axiu_data_V_fu_443_p5 = {{{{xor_ln844_3_fu_437_p2}, {xor_ln844_2_fu_419_p2}}, {xor_ln844_1_fu_369_p2}}, {xor_ln844_fu_341_p2}};

assign data_out_TDATA = data_in_axiu_data_V_fu_443_p5;

assign data_out_TKEEP = data_in_axiu_keep_V_fu_108;

assign data_out_TLAST = data_in_axiu_last_V_fu_100;

assign data_out_TSTRB = data_in_axiu_strb_V_fu_104;

assign empty_11_fu_198_p1 = ap_sig_allocacmp_i_1[0:0];

assign i_2_fu_192_p2 = (ap_sig_allocacmp_i_1 + 31'd1);

assign i_cast18_fu_182_p1 = ap_sig_allocacmp_i_1;

assign icmp_ln50_fu_186_p2 = ((ap_sig_allocacmp_i_1 == add) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_202_p2 = (($signed(i_cast18_fu_182_p1) < $signed(mul)) ? 1'b1 : 1'b0);

assign mul1_fu_272_p3 = {{empty_11_reg_526}, {1'd0}};

assign or_ln62_fu_375_p2 = (mul1_fu_272_p3 | 2'd1);

assign p_Result_3_1_fu_385_p3 = data_in_temp_V_fu_112[zext_ln819_fu_381_p1];

assign p_Result_3_fu_283_p3 = data_in_temp_V_fu_112[zext_ln61_fu_279_p1];

assign p_Result_6_1_fu_459_p4 = {{{trunc_ln1676_fu_455_p1}, {p_Result_3_fu_283_p3}}, {p_Result_3_1_fu_385_p3}};

assign part_set_i_i_lcssa276_out = part_set_i_i_lcssa276_fu_96;

assign tmp_4_fu_299_p3 = part_set_i_i_lcssa276_fu_96[32'd1];

assign tmp_5_fu_307_p3 = part_set_i_i_lcssa276_fu_96[32'd2];

assign tmp_6_fu_315_p3 = part_set_i_i_lcssa276_fu_96[32'd4];

assign tmp_7_fu_393_p3 = part_set_i_i_lcssa276_fu_96[32'd3];

assign tmp_fu_291_p3 = part_set_i_i_lcssa276_fu_96[32'd5];

assign trunc_ln1676_fu_455_p1 = part_set_i_i_lcssa276_fu_96[3:0];

assign trunc_ln63_fu_347_p1 = part_set_i_i_lcssa276_fu_96[0:0];

assign xor_ln844_10_fu_401_p2 = (trunc_ln63_fu_347_p1 ^ tmp_6_fu_315_p3);

assign xor_ln844_11_fu_407_p2 = (tmp_7_fu_393_p3 ^ p_Result_3_1_fu_385_p3);

assign xor_ln844_12_fu_413_p2 = (xor_ln844_11_fu_407_p2 ^ tmp_4_fu_299_p3);

assign xor_ln844_13_fu_425_p2 = (tmp_4_fu_299_p3 ^ p_Result_3_1_fu_385_p3);

assign xor_ln844_14_fu_431_p2 = (xor_ln844_13_fu_425_p2 ^ trunc_ln63_fu_347_p1);

assign xor_ln844_1_fu_369_p2 = (xor_ln844_9_fu_363_p2 ^ xor_ln844_7_fu_351_p2);

assign xor_ln844_2_fu_419_p2 = (xor_ln844_12_fu_413_p2 ^ xor_ln844_10_fu_401_p2);

assign xor_ln844_3_fu_437_p2 = (xor_ln844_5_fu_329_p2 ^ xor_ln844_14_fu_431_p2);

assign xor_ln844_4_fu_323_p2 = (tmp_fu_291_p3 ^ tmp_4_fu_299_p3);

assign xor_ln844_5_fu_329_p2 = (tmp_6_fu_315_p3 ^ p_Result_3_fu_283_p3);

assign xor_ln844_6_fu_335_p2 = (xor_ln844_5_fu_329_p2 ^ tmp_5_fu_307_p3);

assign xor_ln844_7_fu_351_p2 = (trunc_ln63_fu_347_p1 ^ tmp_fu_291_p3);

assign xor_ln844_8_fu_357_p2 = (tmp_5_fu_307_p3 ^ p_Result_3_fu_283_p3);

assign xor_ln844_9_fu_363_p2 = (xor_ln844_8_fu_357_p2 ^ tmp_4_fu_299_p3);

assign xor_ln844_fu_341_p2 = (xor_ln844_6_fu_335_p2 ^ xor_ln844_4_fu_323_p2);

assign zext_ln61_fu_279_p1 = mul1_fu_272_p3;

assign zext_ln819_fu_381_p1 = or_ln62_fu_375_p2;

endmodule //encoder_encoder_Pipeline_VITIS_LOOP_50_2
