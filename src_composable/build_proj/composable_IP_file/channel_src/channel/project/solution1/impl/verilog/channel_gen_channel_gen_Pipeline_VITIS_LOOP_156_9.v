// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module channel_gen_channel_gen_Pipeline_VITIS_LOOP_156_9 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_i_i_i131_le3928,
        conv_i_i_i205_le3921,
        n_3taps_V_0_5,
        n_3taps_V_1_5,
        n_3taps_V_2_5,
        p_Result_17,
        x_real_3taps_V_1_2_reload,
        x_real_3taps_V_2_2_reload,
        p_Result_18,
        x_imag_3taps_V_1_2_reload,
        x_imag_3taps_V_2_2_reload,
        lhs_V_14_out,
        lhs_V_14_out_ap_vld,
        lhs_V_12_out,
        lhs_V_12_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [19:0] conv_i_i_i131_le3928;
input  [19:0] conv_i_i_i205_le3921;
input  [19:0] n_3taps_V_0_5;
input  [19:0] n_3taps_V_1_5;
input  [19:0] n_3taps_V_2_5;
input  [19:0] p_Result_17;
input  [19:0] x_real_3taps_V_1_2_reload;
input  [19:0] x_real_3taps_V_2_2_reload;
input  [19:0] p_Result_18;
input  [19:0] x_imag_3taps_V_1_2_reload;
input  [19:0] x_imag_3taps_V_2_2_reload;
output  [19:0] lhs_V_14_out;
output   lhs_V_14_out_ap_vld;
output  [19:0] lhs_V_12_out;
output   lhs_V_12_out_ap_vld;

reg ap_idle;
reg lhs_V_14_out_ap_vld;
reg lhs_V_12_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1057_fu_182_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [19:0] lhs_V_fu_72;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [19:0] lhs_V_11_fu_76;
reg   [1:0] i_V_fu_80;
wire   [1:0] add_ln870_fu_188_p2;
wire    ap_block_pp0_stage0_01001;
wire   [19:0] r_V_fu_200_p5;
wire  signed [19:0] tmp_1_fu_216_p5;
wire   [19:0] mul_ln1168_fu_229_p1;
wire   [34:0] mul_ln1168_fu_229_p2;
wire   [19:0] r_V_22_fu_235_p4;
wire  signed [19:0] tmp_2_fu_245_p5;
wire  signed [19:0] mul_ln1245_fu_270_p0;
wire  signed [34:0] sext_ln1171_fu_254_p1;
wire   [34:0] lhs_V_12_fu_262_p3;
wire   [34:0] mul_ln1245_fu_270_p2;
wire   [34:0] ret_V_fu_276_p2;
wire  signed [19:0] tmp_3_fu_292_p5;
wire  signed [19:0] mul_ln1245_3_fu_313_p0;
wire   [34:0] lhs_V_13_fu_305_p3;
wire   [34:0] mul_ln1245_3_fu_313_p2;
wire   [34:0] ret_V_14_fu_319_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [34:0] mul_ln1168_fu_229_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

channel_gen_mux_32_20_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 20 ),
    .din2_WIDTH( 20 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 20 ))
mux_32_20_1_1_U105(
    .din0(20'd26214),
    .din1(20'd16384),
    .din2(20'd10869),
    .din3(i_V_fu_80),
    .dout(r_V_fu_200_p5)
);

channel_gen_mux_32_20_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 20 ),
    .din2_WIDTH( 20 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 20 ))
mux_32_20_1_1_U106(
    .din0(n_3taps_V_0_5),
    .din1(n_3taps_V_1_5),
    .din2(n_3taps_V_2_5),
    .din3(i_V_fu_80),
    .dout(tmp_1_fu_216_p5)
);

channel_gen_mul_20s_20ns_35_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 20 ),
    .dout_WIDTH( 35 ))
mul_20s_20ns_35_1_1_U107(
    .din0(tmp_1_fu_216_p5),
    .din1(mul_ln1168_fu_229_p1),
    .dout(mul_ln1168_fu_229_p2)
);

channel_gen_mux_32_20_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 20 ),
    .din2_WIDTH( 20 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 20 ))
mux_32_20_1_1_U108(
    .din0(p_Result_17),
    .din1(x_real_3taps_V_1_2_reload),
    .din2(x_real_3taps_V_2_2_reload),
    .din3(i_V_fu_80),
    .dout(tmp_2_fu_245_p5)
);

channel_gen_mul_20s_20s_35_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 20 ),
    .dout_WIDTH( 35 ))
mul_20s_20s_35_1_1_U109(
    .din0(mul_ln1245_fu_270_p0),
    .din1(tmp_2_fu_245_p5),
    .dout(mul_ln1245_fu_270_p2)
);

channel_gen_mux_32_20_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 20 ),
    .din2_WIDTH( 20 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 20 ))
mux_32_20_1_1_U110(
    .din0(p_Result_18),
    .din1(x_imag_3taps_V_1_2_reload),
    .din2(x_imag_3taps_V_2_2_reload),
    .din3(i_V_fu_80),
    .dout(tmp_3_fu_292_p5)
);

channel_gen_mul_20s_20s_35_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 20 ),
    .dout_WIDTH( 35 ))
mul_20s_20s_35_1_1_U111(
    .din0(mul_ln1245_3_fu_313_p0),
    .din1(tmp_3_fu_292_p5),
    .dout(mul_ln1245_3_fu_313_p2)
);

channel_gen_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_V_fu_80 <= 2'd0;
        end else if (((icmp_ln1057_fu_182_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_V_fu_80 <= add_ln870_fu_188_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            lhs_V_11_fu_76 <= conv_i_i_i131_le3928;
        end else if (((icmp_ln1057_fu_182_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            lhs_V_11_fu_76 <= {{ret_V_14_fu_319_p2[34:15]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            lhs_V_fu_72 <= conv_i_i_i205_le3921;
        end else if (((icmp_ln1057_fu_182_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            lhs_V_fu_72 <= {{ret_V_fu_276_p2[34:15]}};
        end
    end
end

always @ (*) begin
    if (((icmp_ln1057_fu_182_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1057_fu_182_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lhs_V_12_out_ap_vld = 1'b1;
    end else begin
        lhs_V_12_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1057_fu_182_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lhs_V_14_out_ap_vld = 1'b1;
    end else begin
        lhs_V_14_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln870_fu_188_p2 = (i_V_fu_80 + 2'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign icmp_ln1057_fu_182_p2 = ((i_V_fu_80 == 2'd3) ? 1'b1 : 1'b0);

assign lhs_V_12_fu_262_p3 = {{lhs_V_fu_72}, {15'd0}};

assign lhs_V_12_out = lhs_V_fu_72;

assign lhs_V_13_fu_305_p3 = {{lhs_V_11_fu_76}, {15'd0}};

assign lhs_V_14_out = lhs_V_11_fu_76;

assign mul_ln1168_fu_229_p1 = mul_ln1168_fu_229_p10;

assign mul_ln1168_fu_229_p10 = r_V_fu_200_p5;

assign mul_ln1245_3_fu_313_p0 = sext_ln1171_fu_254_p1;

assign mul_ln1245_fu_270_p0 = sext_ln1171_fu_254_p1;

assign r_V_22_fu_235_p4 = {{mul_ln1168_fu_229_p2[34:15]}};

assign ret_V_14_fu_319_p2 = (lhs_V_13_fu_305_p3 + mul_ln1245_3_fu_313_p2);

assign ret_V_fu_276_p2 = (lhs_V_12_fu_262_p3 + mul_ln1245_fu_270_p2);

assign sext_ln1171_fu_254_p1 = $signed(r_V_22_fu_235_p4);

endmodule //channel_gen_channel_gen_Pipeline_VITIS_LOOP_156_9
