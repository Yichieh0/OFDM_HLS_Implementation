// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module channel_gen_channel_gen_Pipeline_VITIS_LOOP_169_10 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        i_V,
        x_real_6taps_V_address0,
        x_real_6taps_V_ce0,
        x_real_6taps_V_we0,
        x_real_6taps_V_d0,
        x_real_6taps_V_address1,
        x_real_6taps_V_ce1,
        x_real_6taps_V_q1,
        x_imag_6taps_V_address0,
        x_imag_6taps_V_ce0,
        x_imag_6taps_V_we0,
        x_imag_6taps_V_d0,
        x_imag_6taps_V_address1,
        x_imag_6taps_V_ce1,
        x_imag_6taps_V_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [3:0] i_V;
output  [2:0] x_real_6taps_V_address0;
output   x_real_6taps_V_ce0;
output   x_real_6taps_V_we0;
output  [19:0] x_real_6taps_V_d0;
output  [2:0] x_real_6taps_V_address1;
output   x_real_6taps_V_ce1;
input  [19:0] x_real_6taps_V_q1;
output  [2:0] x_imag_6taps_V_address0;
output   x_imag_6taps_V_ce0;
output   x_imag_6taps_V_we0;
output  [19:0] x_imag_6taps_V_d0;
output  [2:0] x_imag_6taps_V_address1;
output   x_imag_6taps_V_ce1;
input  [19:0] x_imag_6taps_V_q1;

reg ap_idle;
reg x_real_6taps_V_ce0;
reg x_real_6taps_V_we0;
reg x_real_6taps_V_ce1;
reg x_imag_6taps_V_ce0;
reg x_imag_6taps_V_we0;
reg x_imag_6taps_V_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1065_fu_138_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln573_3_fu_160_p1;
reg   [63:0] zext_ln573_3_reg_273;
wire   [0:0] addr_cmp6_fu_167_p2;
reg   [0:0] addr_cmp6_reg_284;
wire   [0:0] addr_cmp_fu_181_p2;
reg   [0:0] addr_cmp_reg_294;
wire   [63:0] zext_ln573_fu_154_p1;
wire    ap_block_pp0_stage0;
reg   [63:0] reuse_addr_reg3_fu_34;
wire    ap_loop_init;
reg   [19:0] reuse_reg2_fu_38;
wire   [19:0] reuse_select7_fu_206_p3;
reg   [63:0] reuse_addr_reg_fu_42;
reg   [19:0] reuse_reg_fu_46;
wire   [19:0] reuse_select_fu_222_p3;
reg   [3:0] lhs_fu_50;
wire   [3:0] i_V_10_fu_192_p2;
wire   [2:0] trunc_ln1526_fu_144_p1;
wire   [2:0] ret_fu_148_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

channel_gen_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            lhs_fu_50 <= i_V;
        end else if (((icmp_ln1065_fu_138_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            lhs_fu_50 <= i_V_10_fu_192_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg3_fu_34 <= 64'd18446744073709551615;
        end else if (((icmp_ln1065_fu_138_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg3_fu_34 <= zext_ln573_3_fu_160_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_addr_reg_fu_42 <= 64'd18446744073709551615;
        end else if (((icmp_ln1065_fu_138_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reuse_addr_reg_fu_42 <= zext_ln573_3_fu_160_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            reuse_reg2_fu_38 <= 20'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            reuse_reg2_fu_38 <= reuse_select7_fu_206_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            reuse_reg_fu_46 <= 20'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            reuse_reg_fu_46 <= reuse_select_fu_222_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1065_fu_138_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        addr_cmp6_reg_284 <= addr_cmp6_fu_167_p2;
        addr_cmp_reg_294 <= addr_cmp_fu_181_p2;
        zext_ln573_3_reg_273[3 : 0] <= zext_ln573_3_fu_160_p1[3 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln1065_fu_138_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        x_imag_6taps_V_ce0 = 1'b1;
    end else begin
        x_imag_6taps_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_imag_6taps_V_ce1 = 1'b1;
    end else begin
        x_imag_6taps_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        x_imag_6taps_V_we0 = 1'b1;
    end else begin
        x_imag_6taps_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        x_real_6taps_V_ce0 = 1'b1;
    end else begin
        x_real_6taps_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_real_6taps_V_ce1 = 1'b1;
    end else begin
        x_real_6taps_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        x_real_6taps_V_we0 = 1'b1;
    end else begin
        x_real_6taps_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign addr_cmp6_fu_167_p2 = ((reuse_addr_reg3_fu_34 == zext_ln573_fu_154_p1) ? 1'b1 : 1'b0);

assign addr_cmp_fu_181_p2 = ((reuse_addr_reg_fu_42 == zext_ln573_fu_154_p1) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign i_V_10_fu_192_p2 = ($signed(lhs_fu_50) + $signed(4'd15));

assign icmp_ln1065_fu_138_p2 = ((lhs_fu_50 == 4'd0) ? 1'b1 : 1'b0);

assign ret_fu_148_p2 = ($signed(trunc_ln1526_fu_144_p1) + $signed(3'd7));

assign reuse_select7_fu_206_p3 = ((addr_cmp6_reg_284[0:0] == 1'b1) ? reuse_reg2_fu_38 : x_real_6taps_V_q1);

assign reuse_select_fu_222_p3 = ((addr_cmp_reg_294[0:0] == 1'b1) ? reuse_reg_fu_46 : x_imag_6taps_V_q1);

assign trunc_ln1526_fu_144_p1 = lhs_fu_50[2:0];

assign x_imag_6taps_V_address0 = zext_ln573_3_reg_273;

assign x_imag_6taps_V_address1 = zext_ln573_fu_154_p1;

assign x_imag_6taps_V_d0 = ((addr_cmp_reg_294[0:0] == 1'b1) ? reuse_reg_fu_46 : x_imag_6taps_V_q1);

assign x_real_6taps_V_address0 = zext_ln573_3_reg_273;

assign x_real_6taps_V_address1 = zext_ln573_fu_154_p1;

assign x_real_6taps_V_d0 = ((addr_cmp6_reg_284[0:0] == 1'b1) ? reuse_reg2_fu_38 : x_real_6taps_V_q1);

assign zext_ln573_3_fu_160_p1 = lhs_fu_50;

assign zext_ln573_fu_154_p1 = ret_fu_148_p2;

always @ (posedge ap_clk) begin
    zext_ln573_3_reg_273[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //channel_gen_channel_gen_Pipeline_VITIS_LOOP_169_10
