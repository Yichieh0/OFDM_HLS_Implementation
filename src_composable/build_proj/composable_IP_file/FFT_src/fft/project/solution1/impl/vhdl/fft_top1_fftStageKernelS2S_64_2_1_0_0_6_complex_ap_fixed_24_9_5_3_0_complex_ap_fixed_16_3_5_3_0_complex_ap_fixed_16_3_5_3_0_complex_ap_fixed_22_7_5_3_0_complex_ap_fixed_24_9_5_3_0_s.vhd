-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft_top1_fftStageKernelS2S_64_2_1_0_0_6_complex_ap_fixed_24_9_5_3_0_complex_ap_fixed_16_3_5_3_0_complex_ap_fixed_16_3_5_3_0_complex_ap_fixed_22_7_5_3_0_complex_ap_fixed_24_9_5_3_0_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_fftInData_reOrdered_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    p_fftInData_reOrdered_empty_n : IN STD_LOGIC;
    p_fftInData_reOrdered_read : OUT STD_LOGIC;
    fftOutData_local_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    fftOutData_local_full_n : IN STD_LOGIC;
    fftOutData_local_write : OUT STD_LOGIC );
end;


architecture behav of fft_top1_fftStageKernelS2S_64_2_1_0_0_6_complex_ap_fixed_24_9_5_3_0_complex_ap_fixed_16_3_5_3_0_complex_ap_fixed_16_3_5_3_0_complex_ap_fixed_22_7_5_3_0_complex_ap_fixed_24_9_5_3_0_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_75 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110101";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv27_1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv35_0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv14_2000 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln151_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal tmp_nbreadreq_fu_104_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal tmp_reg_645 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_645_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal twiddleObj_twiddleTable_M_imag_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal twiddleObj_twiddleTable_M_imag_V_ce0 : STD_LOGIC;
    signal twiddleObj_twiddleTable_M_imag_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal twiddleObj_twiddleTable_M_imag_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal twiddleObj_twiddleTable_M_imag_V_ce1 : STD_LOGIC;
    signal twiddleObj_twiddleTable_M_imag_V_q1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_fftInData_reOrdered_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal fftOutData_local_blk_n : STD_LOGIC;
    signal k9_reg_165 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_645_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_645_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal X_of_ns_M_real_V_0_fu_196_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal X_of_ns_M_real_V_0_reg_649 : STD_LOGIC_VECTOR (21 downto 0);
    signal X_of_ns_M_imag_V_0_reg_654 : STD_LOGIC_VECTOR (21 downto 0);
    signal X_of_ns_M_real_V_1_reg_659 : STD_LOGIC_VECTOR (21 downto 0);
    signal X_of_ns_M_imag_V_1_reg_665 : STD_LOGIC_VECTOR (21 downto 0);
    signal output_negate_control_imag_reg_671 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_reg_676 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_1_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_1_reg_681 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_negate_control_real_V_reg_691 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_2_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_2_reg_696 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_3_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_3_reg_701 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_342_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_711 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln151_reg_716 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln151_reg_716_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln151_reg_716_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln151_reg_716_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal complexExpMulOut_M_real_V_0_fu_370_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal complexExpMulOut_M_real_V_0_reg_720 : STD_LOGIC_VECTOR (22 downto 0);
    signal complexExpMulOut_M_real_V_0_reg_720_pp0_iter2_reg : STD_LOGIC_VECTOR (22 downto 0);
    signal complexExpMulOut_M_real_V_0_reg_720_pp0_iter3_reg : STD_LOGIC_VECTOR (22 downto 0);
    signal bflyOutData_M_imag_V_0_fu_382_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal bflyOutData_M_imag_V_0_reg_725 : STD_LOGIC_VECTOR (22 downto 0);
    signal bflyOutData_M_imag_V_0_reg_725_pp0_iter2_reg : STD_LOGIC_VECTOR (22 downto 0);
    signal bflyOutData_M_imag_V_0_reg_725_pp0_iter3_reg : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln1171_fu_520_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal sext_ln1171_1_fu_524_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal sext_ln1171_2_fu_528_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal sext_ln1171_3_fu_532_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_phi_mux_k9_phi_fu_169_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_k_1_phi_fu_182_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_k_1_reg_179 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_3_fu_189_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln573_fu_286_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln573_1_fu_337_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal index_V_fu_230_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal lut_index_imag_V_fu_268_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal index_invert_control_imag_fu_240_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal lut_index_imag_V_1_fu_272_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal lut_index_imag_V_2_fu_278_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal index_cos_V_fu_234_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal lut_index_real_V_fu_319_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal index_invert_control_real_V_fu_291_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal lut_index_real_V_1_fu_323_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal lut_index_real_V_2_fu_329_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_28_fu_348_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln712_fu_364_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln712_1_fu_367_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln712_2_fu_376_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln712_3_fu_379_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln_fu_388_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal r_V_fu_395_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal shl_ln1171_1_fu_411_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal r_V_3_fu_418_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal real1_V_4_fu_401_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1245_fu_434_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal imag2_V_5_fu_424_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1245_1_fu_444_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal output_saturation_control_imag_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_out_sin_V_fu_458_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_4_fu_470_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln755_fu_476_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln116_fu_466_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal output_saturation_control_real_V_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_out_cos_V_fu_491_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_5_fu_503_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln755_1_fu_509_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln133_fu_499_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_4_fu_438_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Val2_7_fu_513_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_5_fu_448_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Val2_s_fu_480_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_617_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal grp_fu_624_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal real1_V_fu_539_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal real2_V_fu_548_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_631_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal grp_fu_638_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal imag2_V_fu_572_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal imag1_V_fu_563_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln174_fu_587_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal imag_out_V_fu_581_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal real_out_V_fu_557_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln174_fu_590_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln712_4_fu_536_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_2_fu_594_p7 : STD_LOGIC_VECTOR (119 downto 0);
    signal grp_fu_617_p0 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_617_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_624_p0 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_624_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_631_p0 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_631_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_638_p0 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_638_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_617_ce : STD_LOGIC;
    signal grp_fu_624_ce : STD_LOGIC;
    signal grp_fu_631_ce : STD_LOGIC;
    signal grp_fu_638_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_idle_pp0_0to3 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_178 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component fft_top1_mul_mul_23s_15s_37_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (22 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (36 downto 0) );
    end component;


    component fft_top1_fftStageKernelS2S_64_2_1_0_0_6_complex_ap_fixed_24_9_5_3_0_complex_ap_fixed_1bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    twiddleObj_twiddleTable_M_imag_V_U : component fft_top1_fftStageKernelS2S_64_2_1_0_0_6_complex_ap_fixed_24_9_5_3_0_complex_ap_fixed_1bkb
    generic map (
        DataWidth => 14,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => twiddleObj_twiddleTable_M_imag_V_address0,
        ce0 => twiddleObj_twiddleTable_M_imag_V_ce0,
        q0 => twiddleObj_twiddleTable_M_imag_V_q0,
        address1 => twiddleObj_twiddleTable_M_imag_V_address1,
        ce1 => twiddleObj_twiddleTable_M_imag_V_ce1,
        q1 => twiddleObj_twiddleTable_M_imag_V_q1);

    mul_mul_23s_15s_37_4_1_U59 : component fft_top1_mul_mul_23s_15s_37_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 23,
        din1_WIDTH => 15,
        dout_WIDTH => 37)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_617_p0,
        din1 => grp_fu_617_p1,
        ce => grp_fu_617_ce,
        dout => grp_fu_617_p2);

    mul_mul_23s_15s_37_4_1_U60 : component fft_top1_mul_mul_23s_15s_37_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 23,
        din1_WIDTH => 15,
        dout_WIDTH => 37)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_624_p0,
        din1 => grp_fu_624_p1,
        ce => grp_fu_624_ce,
        dout => grp_fu_624_p2);

    mul_mul_23s_15s_37_4_1_U61 : component fft_top1_mul_mul_23s_15s_37_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 23,
        din1_WIDTH => 15,
        dout_WIDTH => 37)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_631_p0,
        din1 => grp_fu_631_p1,
        ce => grp_fu_631_ce,
        dout => grp_fu_631_p2);

    mul_mul_23s_15s_37_4_1_U62 : component fft_top1_mul_mul_23s_15s_37_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 23,
        din1_WIDTH => 15,
        dout_WIDTH => 37)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_638_p0,
        din1 => grp_fu_638_p1,
        ce => grp_fu_638_ce,
        dout => grp_fu_638_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln151_reg_716_pp0_iter3_reg = ap_const_lv1_0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    k9_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln151_reg_716 = ap_const_lv1_1))) then 
                k9_reg_165 <= k_reg_711;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln151_reg_716 = ap_const_lv1_0)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                k9_reg_165 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_nbreadreq_fu_104_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                X_of_ns_M_imag_V_0_reg_654 <= p_fftInData_reOrdered_dout(53 downto 32);
                X_of_ns_M_imag_V_1_reg_665 <= p_fftInData_reOrdered_dout(117 downto 96);
                X_of_ns_M_real_V_0_reg_649 <= X_of_ns_M_real_V_0_fu_196_p1;
                X_of_ns_M_real_V_1_reg_659 <= p_fftInData_reOrdered_dout(85 downto 64);
                icmp_ln1049_1_reg_681 <= icmp_ln1049_1_fu_262_p2;
                icmp_ln1049_2_reg_696 <= icmp_ln1049_2_fu_307_p2;
                icmp_ln1049_3_reg_701 <= icmp_ln1049_3_fu_313_p2;
                icmp_ln1049_reg_676 <= icmp_ln1049_fu_256_p2;
                output_negate_control_imag_reg_671 <= ap_phi_mux_k9_phi_fu_169_p6(5 downto 5);
                output_negate_control_real_V_reg_691 <= index_cos_V_fu_234_p2(5 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_645 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                bflyOutData_M_imag_V_0_reg_725 <= bflyOutData_M_imag_V_0_fu_382_p2;
                complexExpMulOut_M_real_V_0_reg_720 <= complexExpMulOut_M_real_V_0_fu_370_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                bflyOutData_M_imag_V_0_reg_725_pp0_iter2_reg <= bflyOutData_M_imag_V_0_reg_725;
                bflyOutData_M_imag_V_0_reg_725_pp0_iter3_reg <= bflyOutData_M_imag_V_0_reg_725_pp0_iter2_reg;
                complexExpMulOut_M_real_V_0_reg_720_pp0_iter2_reg <= complexExpMulOut_M_real_V_0_reg_720;
                complexExpMulOut_M_real_V_0_reg_720_pp0_iter3_reg <= complexExpMulOut_M_real_V_0_reg_720_pp0_iter2_reg;
                icmp_ln151_reg_716_pp0_iter2_reg <= icmp_ln151_reg_716_pp0_iter1_reg;
                icmp_ln151_reg_716_pp0_iter3_reg <= icmp_ln151_reg_716_pp0_iter2_reg;
                tmp_reg_645_pp0_iter2_reg <= tmp_reg_645_pp0_iter1_reg;
                tmp_reg_645_pp0_iter3_reg <= tmp_reg_645_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln151_reg_716 <= icmp_ln151_fu_358_p2;
                icmp_ln151_reg_716_pp0_iter1_reg <= icmp_ln151_reg_716;
                tmp_reg_645 <= tmp_nbreadreq_fu_104_p3;
                tmp_reg_645_pp0_iter1_reg <= tmp_reg_645;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                k_reg_711 <= k_fu_342_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_reset_idle_pp0 = ap_const_logic_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    X_of_ns_M_real_V_0_fu_196_p1 <= p_fftInData_reOrdered_dout(22 - 1 downto 0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_done_reg, p_fftInData_reOrdered_empty_n, tmp_nbreadreq_fu_104_p3, fftOutData_local_full_n, tmp_reg_645_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (tmp_reg_645_pp0_iter3_reg = ap_const_lv1_1) and (fftOutData_local_full_n = ap_const_logic_0)) or ((tmp_nbreadreq_fu_104_p3 = ap_const_lv1_1) and (p_fftInData_reOrdered_empty_n = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_done_reg, p_fftInData_reOrdered_empty_n, tmp_nbreadreq_fu_104_p3, fftOutData_local_full_n, tmp_reg_645_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (tmp_reg_645_pp0_iter3_reg = ap_const_lv1_1) and (fftOutData_local_full_n = ap_const_logic_0)) or ((tmp_nbreadreq_fu_104_p3 = ap_const_lv1_1) and (p_fftInData_reOrdered_empty_n = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_done_reg, p_fftInData_reOrdered_empty_n, tmp_nbreadreq_fu_104_p3, fftOutData_local_full_n, tmp_reg_645_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (tmp_reg_645_pp0_iter3_reg = ap_const_lv1_1) and (fftOutData_local_full_n = ap_const_logic_0)) or ((tmp_nbreadreq_fu_104_p3 = ap_const_lv1_1) and (p_fftInData_reOrdered_empty_n = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(p_fftInData_reOrdered_empty_n, tmp_nbreadreq_fu_104_p3)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((tmp_nbreadreq_fu_104_p3 = ap_const_lv1_1) and (p_fftInData_reOrdered_empty_n = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter4_assign_proc : process(fftOutData_local_full_n, tmp_reg_645_pp0_iter3_reg)
    begin
                ap_block_state6_pp0_stage0_iter4 <= ((tmp_reg_645_pp0_iter3_reg = ap_const_lv1_1) and (fftOutData_local_full_n = ap_const_logic_0));
    end process;


    ap_condition_178_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_178 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, icmp_ln151_reg_716_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln151_reg_716_pp0_iter3_reg = ap_const_lv1_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_0to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_k9_phi_fu_169_p6_assign_proc : process(k9_reg_165, k_reg_711, icmp_ln151_reg_716, ap_condition_178)
    begin
        if ((ap_const_boolean_1 = ap_condition_178)) then
            if ((icmp_ln151_reg_716 = ap_const_lv1_0)) then 
                ap_phi_mux_k9_phi_fu_169_p6 <= ap_const_lv32_0;
            elsif ((icmp_ln151_reg_716 = ap_const_lv1_1)) then 
                ap_phi_mux_k9_phi_fu_169_p6 <= k_reg_711;
            else 
                ap_phi_mux_k9_phi_fu_169_p6 <= k9_reg_165;
            end if;
        else 
            ap_phi_mux_k9_phi_fu_169_p6 <= k9_reg_165;
        end if; 
    end process;


    ap_phi_mux_k_1_phi_fu_182_p4_assign_proc : process(tmp_nbreadreq_fu_104_p3, ap_phi_mux_k9_phi_fu_169_p6, ap_phi_reg_pp0_iter0_k_1_reg_179, k_3_fu_189_p2)
    begin
        if ((tmp_nbreadreq_fu_104_p3 = ap_const_lv1_0)) then 
            ap_phi_mux_k_1_phi_fu_182_p4 <= k_3_fu_189_p2;
        elsif ((tmp_nbreadreq_fu_104_p3 = ap_const_lv1_1)) then 
            ap_phi_mux_k_1_phi_fu_182_p4 <= ap_phi_mux_k9_phi_fu_169_p6;
        else 
            ap_phi_mux_k_1_phi_fu_182_p4 <= ap_phi_reg_pp0_iter0_k_1_reg_179;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_k_1_reg_179 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(ap_start, icmp_ln151_fu_358_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (icmp_ln151_fu_358_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to3)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to3 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    bflyOutData_M_imag_V_0_fu_382_p2 <= std_logic_vector(signed(sext_ln712_2_fu_376_p1) + signed(sext_ln712_3_fu_379_p1));
    complexExpMulOut_M_real_V_0_fu_370_p2 <= std_logic_vector(signed(sext_ln712_fu_364_p1) + signed(sext_ln712_1_fu_367_p1));

    fftOutData_local_blk_n_assign_proc : process(fftOutData_local_full_n, tmp_reg_645_pp0_iter3_reg, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (tmp_reg_645_pp0_iter3_reg = ap_const_lv1_1))) then 
            fftOutData_local_blk_n <= fftOutData_local_full_n;
        else 
            fftOutData_local_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fftOutData_local_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_594_p7),128));

    fftOutData_local_write_assign_proc : process(tmp_reg_645_pp0_iter3_reg, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (tmp_reg_645_pp0_iter3_reg = ap_const_lv1_1))) then 
            fftOutData_local_write <= ap_const_logic_1;
        else 
            fftOutData_local_write <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_617_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_617_ce <= ap_const_logic_1;
        else 
            grp_fu_617_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_617_p0 <= sext_ln1171_fu_520_p1(23 - 1 downto 0);
    grp_fu_617_p1 <= sext_ln1171_1_fu_524_p1(15 - 1 downto 0);

    grp_fu_624_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_624_ce <= ap_const_logic_1;
        else 
            grp_fu_624_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_624_p0 <= sext_ln1171_2_fu_528_p1(23 - 1 downto 0);
    grp_fu_624_p1 <= sext_ln1171_3_fu_532_p1(15 - 1 downto 0);

    grp_fu_631_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_631_ce <= ap_const_logic_1;
        else 
            grp_fu_631_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_631_p0 <= sext_ln1171_fu_520_p1(23 - 1 downto 0);
    grp_fu_631_p1 <= sext_ln1171_3_fu_532_p1(15 - 1 downto 0);

    grp_fu_638_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_638_ce <= ap_const_logic_1;
        else 
            grp_fu_638_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_638_p0 <= sext_ln1171_2_fu_528_p1(23 - 1 downto 0);
    grp_fu_638_p1 <= sext_ln1171_1_fu_524_p1(15 - 1 downto 0);
    icmp_ln1049_1_fu_262_p2 <= "1" when (index_V_fu_230_p1 = ap_const_lv6_30) else "0";
    icmp_ln1049_2_fu_307_p2 <= "1" when (index_cos_V_fu_234_p2 = ap_const_lv6_10) else "0";
    icmp_ln1049_3_fu_313_p2 <= "1" when (index_V_fu_230_p1 = ap_const_lv6_0) else "0";
    icmp_ln1049_fu_256_p2 <= "1" when (index_V_fu_230_p1 = ap_const_lv6_10) else "0";
    icmp_ln151_fu_358_p2 <= "1" when (signed(tmp_28_fu_348_p4) < signed(ap_const_lv27_1)) else "0";
    imag1_V_fu_563_p4 <= grp_fu_631_p2(36 downto 13);
    imag2_V_5_fu_424_p4 <= r_V_3_fu_418_p2(34 downto 13);
    imag2_V_fu_572_p4 <= grp_fu_638_p2(36 downto 13);
    imag_out_V_fu_581_p2 <= std_logic_vector(unsigned(imag2_V_fu_572_p4) + unsigned(imag1_V_fu_563_p4));
    index_V_fu_230_p1 <= ap_phi_mux_k9_phi_fu_169_p6(6 - 1 downto 0);
    index_cos_V_fu_234_p2 <= std_logic_vector(unsigned(index_V_fu_230_p1) + unsigned(ap_const_lv6_30));
    index_invert_control_imag_fu_240_p3 <= ap_phi_mux_k9_phi_fu_169_p6(4 downto 4);
    index_invert_control_real_V_fu_291_p3 <= index_cos_V_fu_234_p2(4 downto 4);
    k_3_fu_189_p2 <= std_logic_vector(unsigned(ap_phi_mux_k9_phi_fu_169_p6) + unsigned(ap_const_lv32_FFFFFFFF));
    k_fu_342_p2 <= std_logic_vector(unsigned(ap_phi_mux_k_1_phi_fu_182_p4) + unsigned(ap_const_lv32_1));
    lut_index_imag_V_1_fu_272_p2 <= std_logic_vector(unsigned(ap_const_lv4_0) - unsigned(lut_index_imag_V_fu_268_p1));
    lut_index_imag_V_2_fu_278_p3 <= 
        lut_index_imag_V_1_fu_272_p2 when (index_invert_control_imag_fu_240_p3(0) = '1') else 
        lut_index_imag_V_fu_268_p1;
    lut_index_imag_V_fu_268_p1 <= ap_phi_mux_k9_phi_fu_169_p6(4 - 1 downto 0);
    lut_index_real_V_1_fu_323_p2 <= std_logic_vector(unsigned(ap_const_lv4_0) - unsigned(lut_index_real_V_fu_319_p1));
    lut_index_real_V_2_fu_329_p3 <= 
        lut_index_real_V_1_fu_323_p2 when (index_invert_control_real_V_fu_291_p3(0) = '1') else 
        lut_index_real_V_fu_319_p1;
    lut_index_real_V_fu_319_p1 <= index_cos_V_fu_234_p2(4 - 1 downto 0);
    output_saturation_control_imag_fu_454_p2 <= (icmp_ln1049_reg_676 or icmp_ln1049_1_reg_681);
    output_saturation_control_real_V_fu_487_p2 <= (icmp_ln1049_3_reg_701 or icmp_ln1049_2_reg_696);
    p_Val2_4_fu_470_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(temp_out_sin_V_fu_458_p3));
    p_Val2_5_fu_503_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(temp_out_cos_V_fu_491_p3));
    p_Val2_7_fu_513_p3 <= 
        zext_ln755_1_fu_509_p1 when (output_negate_control_real_V_reg_691(0) = '1') else 
        sext_ln133_fu_499_p1;
    p_Val2_s_fu_480_p3 <= 
        zext_ln755_fu_476_p1 when (output_negate_control_imag_reg_671(0) = '1') else 
        sext_ln116_fu_466_p1;

    p_fftInData_reOrdered_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, p_fftInData_reOrdered_empty_n, tmp_nbreadreq_fu_104_p3, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_nbreadreq_fu_104_p3 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_fftInData_reOrdered_blk_n <= p_fftInData_reOrdered_empty_n;
        else 
            p_fftInData_reOrdered_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_fftInData_reOrdered_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, tmp_nbreadreq_fu_104_p3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_nbreadreq_fu_104_p3 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_fftInData_reOrdered_read <= ap_const_logic_1;
        else 
            p_fftInData_reOrdered_read <= ap_const_logic_0;
        end if; 
    end process;

    r_V_3_fu_418_p2 <= std_logic_vector(unsigned(ap_const_lv35_0) - unsigned(shl_ln1171_1_fu_411_p3));
    r_V_4_fu_438_p2 <= std_logic_vector(signed(sext_ln1245_fu_434_p1) + signed(sext_ln712_1_fu_367_p1));
    r_V_5_fu_448_p2 <= std_logic_vector(signed(sext_ln1245_1_fu_444_p1) + signed(sext_ln712_3_fu_379_p1));
    r_V_fu_395_p2 <= std_logic_vector(unsigned(ap_const_lv35_0) - unsigned(shl_ln_fu_388_p3));
    real1_V_4_fu_401_p4 <= r_V_fu_395_p2(34 downto 13);
    real1_V_fu_539_p4 <= grp_fu_617_p2(36 downto 13);
    real2_V_fu_548_p4 <= grp_fu_624_p2(36 downto 13);
    real_out_V_fu_557_p2 <= std_logic_vector(unsigned(real1_V_fu_539_p4) - unsigned(real2_V_fu_548_p4));
        sext_ln116_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_out_sin_V_fu_458_p3),15));

        sext_ln1171_1_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_7_fu_513_p3),37));

        sext_ln1171_2_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_5_fu_448_p2),37));

        sext_ln1171_3_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_fu_480_p3),37));

        sext_ln1171_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_4_fu_438_p2),37));

        sext_ln1245_1_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(imag2_V_5_fu_424_p4),23));

        sext_ln1245_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(real1_V_4_fu_401_p4),23));

        sext_ln133_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_out_cos_V_fu_491_p3),15));

        sext_ln174_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bflyOutData_M_imag_V_0_reg_725_pp0_iter3_reg),24));

        sext_ln712_1_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(X_of_ns_M_real_V_0_reg_649),23));

        sext_ln712_2_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(X_of_ns_M_imag_V_1_reg_665),23));

        sext_ln712_3_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(X_of_ns_M_imag_V_0_reg_654),23));

        sext_ln712_4_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(complexExpMulOut_M_real_V_0_reg_720_pp0_iter3_reg),24));

        sext_ln712_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(X_of_ns_M_real_V_1_reg_659),23));

    shl_ln1171_1_fu_411_p3 <= (X_of_ns_M_imag_V_1_reg_665 & ap_const_lv13_0);
    shl_ln_fu_388_p3 <= (X_of_ns_M_real_V_1_reg_659 & ap_const_lv13_0);
    temp_out_cos_V_fu_491_p3 <= 
        ap_const_lv14_2000 when (output_saturation_control_real_V_fu_487_p2(0) = '1') else 
        twiddleObj_twiddleTable_M_imag_V_q0;
    temp_out_sin_V_fu_458_p3 <= 
        ap_const_lv14_2000 when (output_saturation_control_imag_fu_454_p2(0) = '1') else 
        twiddleObj_twiddleTable_M_imag_V_q1;
    tmp_28_fu_348_p4 <= k_fu_342_p2(31 downto 5);
    tmp_2_fu_594_p7 <= (((((imag_out_V_fu_581_p2 & ap_const_lv8_0) & real_out_V_fu_557_p2) & zext_ln174_fu_590_p1) & ap_const_lv8_0) & sext_ln712_4_fu_536_p1);
    tmp_nbreadreq_fu_104_p3 <= (0=>(p_fftInData_reOrdered_empty_n), others=>'-');
    twiddleObj_twiddleTable_M_imag_V_address0 <= zext_ln573_1_fu_337_p1(4 - 1 downto 0);
    twiddleObj_twiddleTable_M_imag_V_address1 <= zext_ln573_fu_286_p1(4 - 1 downto 0);

    twiddleObj_twiddleTable_M_imag_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            twiddleObj_twiddleTable_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            twiddleObj_twiddleTable_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    twiddleObj_twiddleTable_M_imag_V_ce1_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            twiddleObj_twiddleTable_M_imag_V_ce1 <= ap_const_logic_1;
        else 
            twiddleObj_twiddleTable_M_imag_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln174_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln174_fu_587_p1),32));
    zext_ln573_1_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lut_index_real_V_2_fu_329_p3),64));
    zext_ln573_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lut_index_imag_V_2_fu_278_p3),64));
    zext_ln755_1_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_5_fu_503_p2),15));
    zext_ln755_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_4_fu_470_p2),15));
end behav;
