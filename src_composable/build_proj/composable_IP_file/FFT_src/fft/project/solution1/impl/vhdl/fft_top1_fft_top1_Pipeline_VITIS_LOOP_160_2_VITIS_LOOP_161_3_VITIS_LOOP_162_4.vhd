-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft_top1_fft_top1_Pipeline_VITIS_LOOP_160_2_VITIS_LOOP_161_3_VITIS_LOOP_162_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_in_TVALID : IN STD_LOGIC;
    p_inData_V_M_real_V_0_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    p_inData_V_M_real_V_0_full_n : IN STD_LOGIC;
    p_inData_V_M_real_V_0_write : OUT STD_LOGIC;
    p_inData_V_M_imag_V_0_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    p_inData_V_M_imag_V_0_full_n : IN STD_LOGIC;
    p_inData_V_M_imag_V_0_write : OUT STD_LOGIC;
    p_inData_V_M_real_V_1_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    p_inData_V_M_real_V_1_full_n : IN STD_LOGIC;
    p_inData_V_M_real_V_1_write : OUT STD_LOGIC;
    p_inData_V_M_imag_V_1_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    p_inData_V_M_imag_V_1_full_n : IN STD_LOGIC;
    p_inData_V_M_imag_V_1_write : OUT STD_LOGIC;
    zext_ln160 : IN STD_LOGIC_VECTOR (38 downto 0);
    data_in_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    data_in_TREADY : OUT STD_LOGIC;
    data_in_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    data_in_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    data_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    data_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    data_in_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    data_in_TDEST : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of fft_top1_fft_top1_Pipeline_VITIS_LOOP_160_2_VITIS_LOOP_161_3_VITIS_LOOP_162_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv39_0 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000000";
    constant ap_const_lv39_1 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    constant ap_const_lv9_80 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln160_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal io_acc_block_signal_op56 : STD_LOGIC;
    signal trunc_ln174_reg_319 : STD_LOGIC_VECTOR (0 downto 0);
    signal io_acc_block_signal_op58 : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal p_inData_V_M_real_V_0_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal p_inData_V_M_imag_V_0_blk_n : STD_LOGIC;
    signal data_in_TDATA_blk_n : STD_LOGIC;
    signal p_inData_V_M_real_V_1_blk_n : STD_LOGIC;
    signal p_inData_V_M_imag_V_1_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_Result_s_reg_307 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Result_3_fu_231_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Result_3_reg_313 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln174_fu_235_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_88 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln162_fu_242_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal indvar_flatten_fu_92 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln161_1_fu_254_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten11_fu_96 : STD_LOGIC_VECTOR (38 downto 0);
    signal add_ln160_fu_167_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln161_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln160_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln160_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln161_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln161_fu_209_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln161_fu_248_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fft_top1_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component fft_top1_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_88 <= ap_const_lv2_0;
                elsif (((icmp_ln160_fu_162_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_88 <= add_ln162_fu_242_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten11_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten11_fu_96 <= ap_const_lv39_0;
                elsif (((icmp_ln160_fu_162_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten11_fu_96 <= add_ln160_fu_167_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_92 <= ap_const_lv9_0;
                elsif (((icmp_ln160_fu_162_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten_fu_92 <= select_ln161_1_fu_254_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln160_fu_162_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_Result_3_reg_313 <= p_Result_3_fu_231_p1;
                p_Result_s_reg_307 <= data_in_TDATA(51 downto 32);
                trunc_ln174_reg_319 <= trunc_ln174_fu_235_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln160_fu_167_p2 <= std_logic_vector(unsigned(indvar_flatten11_fu_96) + unsigned(ap_const_lv39_1));
    add_ln161_fu_248_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_92) + unsigned(ap_const_lv9_1));
    add_ln162_fu_242_p2 <= std_logic_vector(unsigned(select_ln161_fu_209_p3) + unsigned(ap_const_lv2_1));
    and_ln160_fu_197_p2 <= (xor_ln160_fu_185_p2 and icmp_ln162_fu_191_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, data_in_TVALID, icmp_ln160_fu_162_p2, io_acc_block_signal_op56, trunc_ln174_reg_319, io_acc_block_signal_op58)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((io_acc_block_signal_op58 = ap_const_logic_0) and (trunc_ln174_reg_319 = ap_const_lv1_1)) or ((trunc_ln174_reg_319 = ap_const_lv1_0) and (io_acc_block_signal_op56 = ap_const_logic_0)))) or ((icmp_ln160_fu_162_p2 = ap_const_lv1_0) and (data_in_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, data_in_TVALID, icmp_ln160_fu_162_p2, io_acc_block_signal_op56, trunc_ln174_reg_319, io_acc_block_signal_op58)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((io_acc_block_signal_op58 = ap_const_logic_0) and (trunc_ln174_reg_319 = ap_const_lv1_1)) or ((trunc_ln174_reg_319 = ap_const_lv1_0) and (io_acc_block_signal_op56 = ap_const_logic_0)))) or ((icmp_ln160_fu_162_p2 = ap_const_lv1_0) and (data_in_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, data_in_TVALID, icmp_ln160_fu_162_p2, io_acc_block_signal_op56, trunc_ln174_reg_319, io_acc_block_signal_op58)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((io_acc_block_signal_op58 = ap_const_logic_0) and (trunc_ln174_reg_319 = ap_const_lv1_1)) or ((trunc_ln174_reg_319 = ap_const_lv1_0) and (io_acc_block_signal_op56 = ap_const_logic_0)))) or ((icmp_ln160_fu_162_p2 = ap_const_lv1_0) and (data_in_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(data_in_TVALID, icmp_ln160_fu_162_p2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((icmp_ln160_fu_162_p2 = ap_const_lv1_0) and (data_in_TVALID = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(io_acc_block_signal_op56, trunc_ln174_reg_319, io_acc_block_signal_op58)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (((io_acc_block_signal_op58 = ap_const_logic_0) and (trunc_ln174_reg_319 = ap_const_lv1_1)) or ((trunc_ln174_reg_319 = ap_const_lv1_0) and (io_acc_block_signal_op56 = ap_const_logic_0)));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln160_fu_162_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln160_fu_162_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    data_in_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, data_in_TVALID, icmp_ln160_fu_162_p2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln160_fu_162_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_in_TDATA_blk_n <= data_in_TVALID;
        else 
            data_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_in_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln160_fu_162_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln160_fu_162_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_in_TREADY <= ap_const_logic_1;
        else 
            data_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln160_fu_162_p2 <= "1" when (indvar_flatten11_fu_96 = zext_ln160) else "0";
    icmp_ln161_fu_179_p2 <= "1" when (indvar_flatten_fu_92 = ap_const_lv9_80) else "0";
    icmp_ln162_fu_191_p2 <= "1" when (i_fu_88 = ap_const_lv2_2) else "0";
    io_acc_block_signal_op56 <= (p_inData_V_M_real_V_0_full_n and p_inData_V_M_imag_V_0_full_n);
    io_acc_block_signal_op58 <= (p_inData_V_M_real_V_1_full_n and p_inData_V_M_imag_V_1_full_n);
    or_ln161_fu_203_p2 <= (icmp_ln161_fu_179_p2 or and_ln160_fu_197_p2);
    p_Result_3_fu_231_p1 <= data_in_TDATA(20 - 1 downto 0);

    p_inData_V_M_imag_V_0_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, p_inData_V_M_imag_V_0_full_n, trunc_ln174_reg_319, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (trunc_ln174_reg_319 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_inData_V_M_imag_V_0_blk_n <= p_inData_V_M_imag_V_0_full_n;
        else 
            p_inData_V_M_imag_V_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_inData_V_M_imag_V_0_din <= p_Result_3_reg_313;

    p_inData_V_M_imag_V_0_write_assign_proc : process(ap_enable_reg_pp0_iter2, trunc_ln174_reg_319, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln174_reg_319 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_inData_V_M_imag_V_0_write <= ap_const_logic_1;
        else 
            p_inData_V_M_imag_V_0_write <= ap_const_logic_0;
        end if; 
    end process;


    p_inData_V_M_imag_V_1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, trunc_ln174_reg_319, p_inData_V_M_imag_V_1_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (trunc_ln174_reg_319 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_inData_V_M_imag_V_1_blk_n <= p_inData_V_M_imag_V_1_full_n;
        else 
            p_inData_V_M_imag_V_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_inData_V_M_imag_V_1_din <= p_Result_3_reg_313;

    p_inData_V_M_imag_V_1_write_assign_proc : process(ap_enable_reg_pp0_iter2, trunc_ln174_reg_319, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln174_reg_319 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_inData_V_M_imag_V_1_write <= ap_const_logic_1;
        else 
            p_inData_V_M_imag_V_1_write <= ap_const_logic_0;
        end if; 
    end process;


    p_inData_V_M_real_V_0_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, p_inData_V_M_real_V_0_full_n, trunc_ln174_reg_319, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (trunc_ln174_reg_319 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_inData_V_M_real_V_0_blk_n <= p_inData_V_M_real_V_0_full_n;
        else 
            p_inData_V_M_real_V_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_inData_V_M_real_V_0_din <= p_Result_s_reg_307;

    p_inData_V_M_real_V_0_write_assign_proc : process(ap_enable_reg_pp0_iter2, trunc_ln174_reg_319, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln174_reg_319 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_inData_V_M_real_V_0_write <= ap_const_logic_1;
        else 
            p_inData_V_M_real_V_0_write <= ap_const_logic_0;
        end if; 
    end process;


    p_inData_V_M_real_V_1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, trunc_ln174_reg_319, p_inData_V_M_real_V_1_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (trunc_ln174_reg_319 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_inData_V_M_real_V_1_blk_n <= p_inData_V_M_real_V_1_full_n;
        else 
            p_inData_V_M_real_V_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_inData_V_M_real_V_1_din <= p_Result_s_reg_307;

    p_inData_V_M_real_V_1_write_assign_proc : process(ap_enable_reg_pp0_iter2, trunc_ln174_reg_319, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln174_reg_319 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_inData_V_M_real_V_1_write <= ap_const_logic_1;
        else 
            p_inData_V_M_real_V_1_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln161_1_fu_254_p3 <= 
        ap_const_lv9_1 when (icmp_ln161_fu_179_p2(0) = '1') else 
        add_ln161_fu_248_p2;
    select_ln161_fu_209_p3 <= 
        ap_const_lv2_0 when (or_ln161_fu_203_p2(0) = '1') else 
        i_fu_88;
    trunc_ln174_fu_235_p1 <= select_ln161_fu_209_p3(1 - 1 downto 0);
    xor_ln160_fu_185_p2 <= (icmp_ln161_fu_179_p2 xor ap_const_lv1_1);
end behav;
