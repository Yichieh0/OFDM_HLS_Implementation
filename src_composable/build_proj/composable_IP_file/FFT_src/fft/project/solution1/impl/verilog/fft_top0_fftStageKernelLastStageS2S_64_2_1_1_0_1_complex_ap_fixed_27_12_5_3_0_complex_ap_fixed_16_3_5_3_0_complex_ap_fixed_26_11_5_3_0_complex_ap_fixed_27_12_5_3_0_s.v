// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fft_top0_fftStageKernelLastStageS2S_64_2_1_1_0_1_complex_ap_fixed_27_12_5_3_0_complex_ap_fixed_16_3_5_3_0_complex_ap_fixed_26_11_5_3_0_complex_ap_fixed_27_12_5_3_0_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        fftOutData_local2_dout,
        fftOutData_local2_empty_n,
        fftOutData_local2_read,
        fftOutData_local_din,
        fftOutData_local_full_n,
        fftOutData_local_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [127:0] fftOutData_local2_dout;
input   fftOutData_local2_empty_n;
output   fftOutData_local2_read;
output  [127:0] fftOutData_local_din;
input   fftOutData_local_full_n;
output   fftOutData_local_write;
output   start_out;
output   start_write;

reg ap_done;
reg ap_idle;
reg fftOutData_local2_read;
reg fftOutData_local_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire   [0:0] icmp_ln215_fu_195_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_nbreadreq_fu_78_p3;
reg    ap_block_state2_pp0_stage0_iter0;
reg   [0:0] tmp_reg_308;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_11001;
reg    fftOutData_local2_blk_n;
wire    ap_block_pp0_stage0;
reg    fftOutData_local_blk_n;
reg   [31:0] iter1_reg_114;
wire   [25:0] X_of_ns_M_real_V_0_fu_145_p1;
reg   [25:0] X_of_ns_M_real_V_0_reg_312;
reg   [25:0] X_of_ns_M_imag_V_0_reg_318;
reg   [25:0] X_of_ns_M_real_V_1_reg_324;
reg   [25:0] X_of_ns_M_imag_V_1_reg_330;
wire   [31:0] iter_fu_179_p2;
reg   [31:0] iter_reg_336;
reg   [0:0] icmp_ln215_reg_341;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg   [31:0] ap_phi_mux_iter1_phi_fu_118_p6;
reg   [31:0] ap_phi_mux_iter_1_phi_fu_131_p4;
wire   [31:0] ap_phi_reg_pp0_iter0_iter_1_reg_128;
wire   [31:0] iter_2_fu_138_p2;
reg    ap_block_pp0_stage0_01001;
wire   [26:0] tmp_47_fu_185_p4;
wire   [25:0] bflyOutData_M_real_V_0_fu_201_p2;
wire   [38:0] shl_ln_fu_213_p3;
wire   [38:0] r_V_fu_220_p2;
wire   [38:0] shl_ln1171_6_fu_236_p3;
wire   [38:0] r_V_28_fu_243_p2;
wire   [25:0] real1_V_fu_226_p4;
wire   [25:0] imag2_V_fu_249_p4;
wire   [25:0] bflyOutData_M_real_V_1_fu_259_p2;
wire   [25:0] bflyOutData_M_imag_V_0_fu_205_p2;
wire  signed [26:0] sext_ln174_fu_273_p1;
wire   [25:0] add_ln712_23_fu_264_p2;
wire  signed [26:0] sext_ln712_5_fu_269_p1;
wire   [31:0] zext_ln174_fu_277_p1;
wire  signed [26:0] sext_ln712_fu_209_p1;
wire   [121:0] tmp_4_fu_281_p7;
wire  signed [122:0] sext_ln174_1_fu_297_p1;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_89;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln215_reg_341 == 1'd0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= real_start;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln215_reg_341 == 1'd1))) begin
        iter1_reg_114 <= iter_reg_336;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln215_reg_341 == 1'd0)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        iter1_reg_114 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_nbreadreq_fu_78_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_of_ns_M_imag_V_0_reg_318 <= {{fftOutData_local2_dout[57:32]}};
        X_of_ns_M_imag_V_1_reg_330 <= {{fftOutData_local2_dout[121:96]}};
        X_of_ns_M_real_V_0_reg_312 <= X_of_ns_M_real_V_0_fu_145_p1;
        X_of_ns_M_real_V_1_reg_324 <= {{fftOutData_local2_dout[89:64]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln215_reg_341 <= icmp_ln215_fu_195_p2;
        tmp_reg_308 <= tmp_nbreadreq_fu_78_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        iter_reg_336 <= iter_fu_179_p2;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln215_reg_341 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_89)) begin
        if ((icmp_ln215_reg_341 == 1'd0)) begin
            ap_phi_mux_iter1_phi_fu_118_p6 = 32'd0;
        end else if ((icmp_ln215_reg_341 == 1'd1)) begin
            ap_phi_mux_iter1_phi_fu_118_p6 = iter_reg_336;
        end else begin
            ap_phi_mux_iter1_phi_fu_118_p6 = iter1_reg_114;
        end
    end else begin
        ap_phi_mux_iter1_phi_fu_118_p6 = iter1_reg_114;
    end
end

always @ (*) begin
    if ((tmp_nbreadreq_fu_78_p3 == 1'd0)) begin
        ap_phi_mux_iter_1_phi_fu_131_p4 = iter_2_fu_138_p2;
    end else if ((tmp_nbreadreq_fu_78_p3 == 1'd1)) begin
        ap_phi_mux_iter_1_phi_fu_131_p4 = ap_phi_mux_iter1_phi_fu_118_p6;
    end else begin
        ap_phi_mux_iter_1_phi_fu_131_p4 = ap_phi_reg_pp0_iter0_iter_1_reg_128;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_nbreadreq_fu_78_p3 == 1'd1) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fftOutData_local2_blk_n = fftOutData_local2_empty_n;
    end else begin
        fftOutData_local2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_nbreadreq_fu_78_p3 == 1'd1) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fftOutData_local2_read = 1'b1;
    end else begin
        fftOutData_local2_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_reg_308 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fftOutData_local_blk_n = fftOutData_local_full_n;
    end else begin
        fftOutData_local_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_reg_308 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fftOutData_local_write = 1'b1;
    end else begin
        fftOutData_local_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (real_start == 1'b1) & (icmp_ln215_fu_195_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_reset_idle_pp0 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign X_of_ns_M_real_V_0_fu_145_p1 = fftOutData_local2_dout[25:0];

assign add_ln712_23_fu_264_p2 = (imag2_V_fu_249_p4 + X_of_ns_M_imag_V_0_reg_318);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_reg_308 == 1'd1) & (fftOutData_local_full_n == 1'b0)) | ((tmp_nbreadreq_fu_78_p3 == 1'd1) & (fftOutData_local2_empty_n == 1'b0) & (real_start == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_reg_308 == 1'd1) & (fftOutData_local_full_n == 1'b0)) | ((tmp_nbreadreq_fu_78_p3 == 1'd1) & (fftOutData_local2_empty_n == 1'b0) & (real_start == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_reg_308 == 1'd1) & (fftOutData_local_full_n == 1'b0)) | ((tmp_nbreadreq_fu_78_p3 == 1'd1) & (fftOutData_local2_empty_n == 1'b0) & (real_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((tmp_nbreadreq_fu_78_p3 == 1'd1) & (fftOutData_local2_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((tmp_reg_308 == 1'd1) & (fftOutData_local_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_89 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = real_start;

assign ap_phi_reg_pp0_iter0_iter_1_reg_128 = 'bx;

assign ap_ready = internal_ap_ready;

assign bflyOutData_M_imag_V_0_fu_205_p2 = (X_of_ns_M_imag_V_1_reg_330 + X_of_ns_M_imag_V_0_reg_318);

assign bflyOutData_M_real_V_0_fu_201_p2 = (X_of_ns_M_real_V_1_reg_324 + X_of_ns_M_real_V_0_reg_312);

assign bflyOutData_M_real_V_1_fu_259_p2 = (real1_V_fu_226_p4 + X_of_ns_M_real_V_0_reg_312);

assign fftOutData_local_din = $unsigned(sext_ln174_1_fu_297_p1);

assign icmp_ln215_fu_195_p2 = (($signed(tmp_47_fu_185_p4) < $signed(27'd1)) ? 1'b1 : 1'b0);

assign imag2_V_fu_249_p4 = {{r_V_28_fu_243_p2[38:13]}};

assign iter_2_fu_138_p2 = ($signed(ap_phi_mux_iter1_phi_fu_118_p6) + $signed(32'd4294967295));

assign iter_fu_179_p2 = (ap_phi_mux_iter_1_phi_fu_131_p4 + 32'd1);

assign r_V_28_fu_243_p2 = (39'd0 - shl_ln1171_6_fu_236_p3);

assign r_V_fu_220_p2 = (39'd0 - shl_ln_fu_213_p3);

assign real1_V_fu_226_p4 = {{r_V_fu_220_p2[38:13]}};

assign sext_ln174_1_fu_297_p1 = $signed(tmp_4_fu_281_p7);

assign sext_ln174_fu_273_p1 = $signed(bflyOutData_M_imag_V_0_fu_205_p2);

assign sext_ln712_5_fu_269_p1 = $signed(bflyOutData_M_real_V_1_fu_259_p2);

assign sext_ln712_fu_209_p1 = $signed(bflyOutData_M_real_V_0_fu_201_p2);

assign shl_ln1171_6_fu_236_p3 = {{X_of_ns_M_imag_V_1_reg_330}, {13'd0}};

assign shl_ln_fu_213_p3 = {{X_of_ns_M_real_V_1_reg_324}, {13'd0}};

assign start_out = real_start;

assign tmp_47_fu_185_p4 = {{iter_fu_179_p2[31:5]}};

assign tmp_4_fu_281_p7 = {{{{{{add_ln712_23_fu_264_p2}, {5'd0}}, {sext_ln712_5_fu_269_p1}}, {zext_ln174_fu_277_p1}}, {5'd0}}, {sext_ln712_fu_209_p1}};

assign tmp_nbreadreq_fu_78_p3 = fftOutData_local2_empty_n;

assign zext_ln174_fu_277_p1 = $unsigned(sext_ln174_fu_273_p1);

endmodule //fft_top0_fftStageKernelLastStageS2S_64_2_1_1_0_1_complex_ap_fixed_27_12_5_3_0_complex_ap_fixed_16_3_5_3_0_complex_ap_fixed_26_11_5_3_0_complex_ap_fixed_27_12_5_3_0_s
