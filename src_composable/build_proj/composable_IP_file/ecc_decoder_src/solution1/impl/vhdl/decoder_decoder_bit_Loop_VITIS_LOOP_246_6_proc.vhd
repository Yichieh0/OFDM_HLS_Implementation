-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity decoder_decoder_bit_Loop_VITIS_LOOP_246_6_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    temp_trellis_survivor_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    temp_trellis_survivor_V_ce0 : OUT STD_LOGIC;
    temp_trellis_survivor_V_q0 : IN STD_LOGIC_VECTOR (32 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of decoder_decoder_bit_Loop_VITIS_LOOP_246_6_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln246_fu_89_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i_reg_289 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal best_branch_2_reg_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_85_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_303 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln248_fu_101_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_1_fu_42 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_fu_95_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal best_branch_fu_46 : STD_LOGIC_VECTOR (31 downto 0);
    signal best_branch_1_fu_263_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_best_branch_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_8_cast_i_fu_111_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln251_fu_122_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln251_fu_135_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln251_1_fu_140_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln251_fu_150_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln251_2_fu_160_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_fu_127_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln251_1_fu_154_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln251_1_fu_170_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln251_fu_174_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tobool_i_fu_114_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln249_fu_182_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln257_fu_203_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln257_1_fu_208_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln257_fu_218_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln257_2_fu_228_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_1_fu_196_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln257_1_fu_222_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln257_1_fu_237_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln257_fu_241_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln255_fu_249_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln248_fu_188_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln254_fu_255_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_87 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component decoder_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component decoder_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if (((icmp_ln246_fu_89_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_return_preg <= empty_fu_85_p1;
                end if; 
            end if;
        end if;
    end process;


    best_branch_fu_46_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_start_int = ap_const_logic_1))) then 
                    best_branch_fu_46 <= p_read;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    best_branch_fu_46 <= best_branch_1_fu_263_p3;
                end if;
            end if; 
        end if;
    end process;

    i_1_fu_42_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_87)) then
                if ((icmp_ln246_fu_89_p2 = ap_const_lv1_0)) then 
                    i_1_fu_42 <= i_2_fu_95_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_1_fu_42 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                best_branch_2_reg_294 <= ap_sig_allocacmp_best_branch_2;
                empty_reg_303 <= empty_fu_85_p1;
                i_reg_289 <= ap_sig_allocacmp_i;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln249_fu_182_p2 <= std_logic_vector(unsigned(select_ln251_fu_174_p3) + unsigned(ap_const_lv32_20));
    add_ln251_fu_122_p2 <= std_logic_vector(unsigned(best_branch_2_reg_294) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln255_fu_249_p2 <= std_logic_vector(unsigned(select_ln257_fu_241_p3) + unsigned(ap_const_lv32_20));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_done_reg, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_done_reg, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_87_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_87 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln246_fu_89_p2, ap_start_int)
    begin
        if (((icmp_ln246_fu_89_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln246_fu_89_p2, ap_block_pp0_stage0_11001, empty_fu_85_p1, ap_return_preg)
    begin
        if (((icmp_ln246_fu_89_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_return <= empty_fu_85_p1;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    ap_sig_allocacmp_best_branch_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, p_read, ap_block_pp0_stage0, ap_loop_init, best_branch_fu_46, best_branch_1_fu_263_p3, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            if (((ap_loop_init = ap_const_logic_1) and (ap_start_int = ap_const_logic_1))) then 
                ap_sig_allocacmp_best_branch_2 <= p_read;
            elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                ap_sig_allocacmp_best_branch_2 <= best_branch_1_fu_263_p3;
            else 
                ap_sig_allocacmp_best_branch_2 <= best_branch_fu_46;
            end if;
        else 
            ap_sig_allocacmp_best_branch_2 <= best_branch_fu_46;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_1_fu_42, ap_loop_init, ap_start_int)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_i <= i_1_fu_42;
        end if; 
    end process;

    best_branch_1_fu_263_p3 <= 
        select_ln248_fu_188_p3 when (empty_reg_303(0) = '1') else 
        select_ln254_fu_255_p3;
    empty_fu_85_p1 <= ap_sig_allocacmp_best_branch_2(1 - 1 downto 0);
    i_2_fu_95_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv6_1));
    i_8_cast_i_fu_111_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_289),32));
    icmp_ln246_fu_89_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv6_20) else "0";
    lshr_ln251_1_fu_140_p4 <= sub_ln251_fu_135_p2(31 downto 1);
    lshr_ln251_2_fu_160_p4 <= add_ln251_fu_122_p2(31 downto 1);
    lshr_ln257_1_fu_208_p4 <= sub_ln257_fu_203_p2(31 downto 1);
    lshr_ln257_2_fu_228_p4 <= best_branch_2_reg_294(31 downto 1);
    select_ln248_fu_188_p3 <= 
        add_ln249_fu_182_p2 when (tobool_i_fu_114_p3(0) = '1') else 
        select_ln251_fu_174_p3;
    select_ln251_fu_174_p3 <= 
        sub_ln251_1_fu_154_p2 when (tmp_fu_127_p3(0) = '1') else 
        zext_ln251_1_fu_170_p1;
    select_ln254_fu_255_p3 <= 
        add_ln255_fu_249_p2 when (tobool_i_fu_114_p3(0) = '1') else 
        select_ln257_fu_241_p3;
    select_ln257_fu_241_p3 <= 
        sub_ln257_1_fu_222_p2 when (tmp_1_fu_196_p3(0) = '1') else 
        zext_ln257_1_fu_237_p1;
    sub_ln251_1_fu_154_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(zext_ln251_fu_150_p1));
    sub_ln251_fu_135_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) - unsigned(best_branch_2_reg_294));
    sub_ln257_1_fu_222_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(zext_ln257_fu_218_p1));
    sub_ln257_fu_203_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(best_branch_2_reg_294));
    temp_trellis_survivor_V_address0 <= zext_ln248_fu_101_p1(6 - 1 downto 0);

    temp_trellis_survivor_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_trellis_survivor_V_ce0 <= ap_const_logic_1;
        else 
            temp_trellis_survivor_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_196_p3 <= best_branch_2_reg_294(31 downto 31);
    tmp_fu_127_p3 <= add_ln251_fu_122_p2(31 downto 31);
    tobool_i_fu_114_p3 <= temp_trellis_survivor_V_q0(to_integer(unsigned(i_8_cast_i_fu_111_p1)) downto to_integer(unsigned(i_8_cast_i_fu_111_p1))) when (to_integer(unsigned(i_8_cast_i_fu_111_p1))>= 0 and to_integer(unsigned(i_8_cast_i_fu_111_p1))<=32) else "-";
    zext_ln248_fu_101_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_best_branch_2),64));
    zext_ln251_1_fu_170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln251_2_fu_160_p4),32));
    zext_ln251_fu_150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln251_1_fu_140_p4),32));
    zext_ln257_1_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln257_2_fu_228_p4),32));
    zext_ln257_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln257_1_fu_208_p4),32));
end behav;
