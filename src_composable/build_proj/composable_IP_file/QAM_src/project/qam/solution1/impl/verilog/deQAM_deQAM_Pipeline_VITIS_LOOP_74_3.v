// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module deQAM_deQAM_Pipeline_VITIS_LOOP_74_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        select_ln70_cast,
        or_ln1827_1,
        op2_assign,
        read_in_real_V_2,
        select_ln74,
        v_V_0_out,
        v_V_0_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [1:0] select_ln70_cast;
input  [0:0] or_ln1827_1;
input  [63:0] op2_assign;
input  [19:0] read_in_real_V_2;
input  [2:0] select_ln74;
output  [3:0] v_V_0_out;
output   v_V_0_out_ap_vld;

reg ap_idle;
reg v_V_0_out_ap_vld;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state4;
wire    ap_block_state4_pp0_stage3_iter0;
wire   [0:0] and_ln1827_1_fu_172_p2;
reg    ap_condition_exit_pp0_iter0_stage3;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ap_block_state1_pp0_stage0_iter0;
wire  signed [3:0] select_ln74_cast_fu_108_p1;
reg  signed [3:0] select_ln74_cast_reg_265;
reg   [3:0] i_V_3_reg_270;
wire   [63:0] grp_fu_105_p1;
reg   [63:0] conv_i_i_reg_281;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
wire   [0:0] icmp_ln1827_fu_151_p2;
reg   [0:0] icmp_ln1827_reg_287;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
wire   [0:0] icmp_ln1827_1_fu_157_p2;
reg   [0:0] icmp_ln1827_1_reg_292;
reg   [3:0] i_V_fu_56;
wire   [3:0] i_V_4_fu_216_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_V_3;
reg   [3:0] v_V_0_fu_60;
wire   [3:0] select_ln75_fu_208_p3;
wire  signed [3:0] select_ln70_cast_cast_fu_112_p1;
wire   [31:0] grp_fu_105_p0;
wire   [63:0] bitcast_ln1827_fu_134_p1;
wire   [10:0] tmp_fu_137_p4;
wire   [51:0] trunc_ln1827_fu_147_p1;
wire   [0:0] grp_fu_101_p2;
wire   [0:0] and_ln1827_fu_167_p2;
wire   [0:0] or_ln1827_fu_163_p2;
wire   [18:0] shl_ln_fu_181_p3;
wire   [19:0] zext_ln1549_fu_188_p1;
wire   [0:0] icmp_ln1549_fu_192_p2;
wire   [0:0] xor_ln1549_fu_197_p2;
wire   [3:0] add_ln70_fu_203_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_done_reg = 1'b0;
end

deQAM_dcmp_64ns_64ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dcmp_64ns_64ns_1_2_no_dsp_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_i_i_reg_281),
    .din1(op2_assign),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_101_p2)
);

deQAM_uitodp_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
uitodp_32ns_64_2_no_dsp_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_105_p0),
    .ce(1'b1),
    .dout(grp_fu_105_p1)
);

deQAM_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage3),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        i_V_fu_56 <= 4'd2;
    end else if (((1'd1 == and_ln1827_1_fu_172_p2) & (1'b1 == ap_CS_fsm_state4))) begin
        i_V_fu_56 <= i_V_4_fu_216_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        v_V_0_fu_60 <= select_ln70_cast_cast_fu_112_p1;
    end else if (((1'd1 == and_ln1827_1_fu_172_p2) & (1'b1 == ap_CS_fsm_state4))) begin
        v_V_0_fu_60 <= select_ln75_fu_208_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_i_i_reg_281 <= grp_fu_105_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        i_V_3_reg_270 <= ap_sig_allocacmp_i_V_3;
        select_ln74_cast_reg_265 <= select_ln74_cast_fu_108_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln1827_1_reg_292 <= icmp_ln1827_1_fu_157_p2;
        icmp_ln1827_reg_287 <= icmp_ln1827_fu_151_p2;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if (((1'd0 == and_ln1827_1_fu_172_p2) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_V_3 = 4'd2;
    end else begin
        ap_sig_allocacmp_i_V_3 = i_V_fu_56;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln1827_1_fu_172_p2) & (1'b1 == ap_CS_fsm_state4))) begin
        v_V_0_out_ap_vld = 1'b1;
    end else begin
        v_V_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln70_fu_203_p2 = ($signed(v_V_0_fu_60) + $signed(select_ln74_cast_reg_265));

assign and_ln1827_1_fu_172_p2 = (or_ln1827_fu_163_p2 & and_ln1827_fu_167_p2);

assign and_ln1827_fu_167_p2 = (or_ln1827_1 & grp_fu_101_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage3;

assign bitcast_ln1827_fu_134_p1 = conv_i_i_reg_281;

assign grp_fu_105_p0 = ap_sig_allocacmp_i_V_3;

assign i_V_4_fu_216_p2 = (i_V_3_reg_270 + 4'd2);

assign icmp_ln1549_fu_192_p2 = (($signed(read_in_real_V_2) < $signed(zext_ln1549_fu_188_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1827_1_fu_157_p2 = ((trunc_ln1827_fu_147_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln1827_fu_151_p2 = ((tmp_fu_137_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign or_ln1827_fu_163_p2 = (icmp_ln1827_reg_287 | icmp_ln1827_1_reg_292);

assign select_ln70_cast_cast_fu_112_p1 = $signed(select_ln70_cast);

assign select_ln74_cast_fu_108_p1 = $signed(select_ln74);

assign select_ln75_fu_208_p3 = ((xor_ln1549_fu_197_p2[0:0] == 1'b1) ? add_ln70_fu_203_p2 : v_V_0_fu_60);

assign shl_ln_fu_181_p3 = {{i_V_3_reg_270}, {15'd0}};

assign tmp_fu_137_p4 = {{bitcast_ln1827_fu_134_p1[62:52]}};

assign trunc_ln1827_fu_147_p1 = bitcast_ln1827_fu_134_p1[51:0];

assign v_V_0_out = v_V_0_fu_60;

assign xor_ln1549_fu_197_p2 = (icmp_ln1549_fu_192_p2 ^ 1'd1);

assign zext_ln1549_fu_188_p1 = shl_ln_fu_181_p3;

endmodule //deQAM_deQAM_Pipeline_VITIS_LOOP_74_3
