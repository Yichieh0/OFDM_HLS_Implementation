-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity QAM_QAM_Pipeline_VITIS_LOOP_69_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_in_TVALID : IN STD_LOGIC;
    data_out_TREADY : IN STD_LOGIC;
    mul : IN STD_LOGIC_VECTOR (31 downto 0);
    data_out_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    data_out_TVALID : OUT STD_LOGIC;
    data_out_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_out_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    data_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    data_out_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    data_out_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    data_in_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    data_in_TREADY : OUT STD_LOGIC;
    data_in_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    data_in_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    data_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    data_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    data_in_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    data_in_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    qam_num_2_reload : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of QAM_QAM_Pipeline_VITIS_LOOP_69_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv62_1 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFFD : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111101";
    constant ap_const_lv62_0 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv62_2 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln69_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal data_out_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal data_in_TDATA_blk_n : STD_LOGIC;
    signal qam_num_2_reload_read_read_fu_120_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ret_fu_268_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_out_temp_imag_V_1_phi_fu_184_p6 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln29_1_cast_fu_278_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_reg_pp0_iter0_out_temp_imag_V_1_reg_181 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_fu_108 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_k_load : STD_LOGIC_VECTOR (30 downto 0);
    signal k_1_fu_212_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal out_temp_real_V_fu_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln110_fu_250_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_fu_291_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal select_ln28_1_cast_fu_327_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_temp_imag_V_fu_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1049_fu_226_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln29_fu_287_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal k_cast_fu_202_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_1_fu_222_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_234_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal icmp_ln1049_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_1_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_2_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_297 : BOOLEAN;
    signal ap_condition_131 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component QAM_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component QAM_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    k_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln69_fu_206_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1))) then 
                    k_fu_108 <= k_1_fu_212_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_108 <= ap_const_lv31_0;
                end if;
            end if; 
        end if;
    end process;

    out_temp_imag_V_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((qam_num_2_reload_read_read_fu_120_p2 = ap_const_lv32_10) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln69_fu_206_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln_fu_291_p4 = ap_const_lv62_0)) or ((qam_num_2_reload_read_read_fu_120_p2 = ap_const_lv32_10) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln69_fu_206_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln_fu_291_p4 = ap_const_lv62_1)) or (not((trunc_ln_fu_291_p4 = ap_const_lv62_0)) and not((trunc_ln_fu_291_p4 = ap_const_lv62_1)) and (qam_num_2_reload_read_read_fu_120_p2 = ap_const_lv32_10) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln69_fu_206_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                out_temp_imag_V_fu_116 <= sext_ln29_fu_287_p1;
            elsif (((qam_num_2_reload_read_read_fu_120_p2 = ap_const_lv32_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln69_fu_206_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                out_temp_imag_V_fu_116 <= select_ln1049_fu_226_p3;
            end if; 
        end if;
    end process;

    out_temp_real_V_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_131)) then
                if ((ap_const_boolean_1 = ap_condition_297)) then 
                                        out_temp_real_V_fu_112(31 downto 1) <= select_ln28_1_cast_fu_327_p3(31 downto 1);
                elsif (((qam_num_2_reload_read_read_fu_120_p2 = ap_const_lv32_10) and (trunc_ln_fu_291_p4 = ap_const_lv62_0))) then 
                    out_temp_real_V_fu_112(1) <= '0';
                    out_temp_real_V_fu_112(2) <= '1';
                    out_temp_real_V_fu_112(3) <= '1';
                    out_temp_real_V_fu_112(4) <= '1';
                    out_temp_real_V_fu_112(5) <= '1';
                    out_temp_real_V_fu_112(6) <= '1';
                    out_temp_real_V_fu_112(7) <= '1';
                    out_temp_real_V_fu_112(8) <= '1';
                    out_temp_real_V_fu_112(9) <= '1';
                    out_temp_real_V_fu_112(10) <= '1';
                    out_temp_real_V_fu_112(11) <= '1';
                    out_temp_real_V_fu_112(12) <= '1';
                    out_temp_real_V_fu_112(13) <= '1';
                    out_temp_real_V_fu_112(14) <= '1';
                    out_temp_real_V_fu_112(15) <= '1';
                    out_temp_real_V_fu_112(16) <= '1';
                    out_temp_real_V_fu_112(17) <= '1';
                    out_temp_real_V_fu_112(18) <= '1';
                    out_temp_real_V_fu_112(19) <= '1';
                    out_temp_real_V_fu_112(20) <= '1';
                    out_temp_real_V_fu_112(21) <= '1';
                    out_temp_real_V_fu_112(22) <= '1';
                    out_temp_real_V_fu_112(23) <= '1';
                    out_temp_real_V_fu_112(24) <= '1';
                    out_temp_real_V_fu_112(25) <= '1';
                    out_temp_real_V_fu_112(26) <= '1';
                    out_temp_real_V_fu_112(27) <= '1';
                    out_temp_real_V_fu_112(28) <= '1';
                    out_temp_real_V_fu_112(29) <= '1';
                    out_temp_real_V_fu_112(30) <= '1';
                    out_temp_real_V_fu_112(31) <= '1';
                elsif (((qam_num_2_reload_read_read_fu_120_p2 = ap_const_lv32_10) and (trunc_ln_fu_291_p4 = ap_const_lv62_1))) then 
                    out_temp_real_V_fu_112(1) <= '1';
                    out_temp_real_V_fu_112(2) <= '1';
                    out_temp_real_V_fu_112(3) <= '1';
                    out_temp_real_V_fu_112(4) <= '1';
                    out_temp_real_V_fu_112(5) <= '1';
                    out_temp_real_V_fu_112(6) <= '1';
                    out_temp_real_V_fu_112(7) <= '1';
                    out_temp_real_V_fu_112(8) <= '1';
                    out_temp_real_V_fu_112(9) <= '1';
                    out_temp_real_V_fu_112(10) <= '1';
                    out_temp_real_V_fu_112(11) <= '1';
                    out_temp_real_V_fu_112(12) <= '1';
                    out_temp_real_V_fu_112(13) <= '1';
                    out_temp_real_V_fu_112(14) <= '1';
                    out_temp_real_V_fu_112(15) <= '1';
                    out_temp_real_V_fu_112(16) <= '1';
                    out_temp_real_V_fu_112(17) <= '1';
                    out_temp_real_V_fu_112(18) <= '1';
                    out_temp_real_V_fu_112(19) <= '1';
                    out_temp_real_V_fu_112(20) <= '1';
                    out_temp_real_V_fu_112(21) <= '1';
                    out_temp_real_V_fu_112(22) <= '1';
                    out_temp_real_V_fu_112(23) <= '1';
                    out_temp_real_V_fu_112(24) <= '1';
                    out_temp_real_V_fu_112(25) <= '1';
                    out_temp_real_V_fu_112(26) <= '1';
                    out_temp_real_V_fu_112(27) <= '1';
                    out_temp_real_V_fu_112(28) <= '1';
                    out_temp_real_V_fu_112(29) <= '1';
                    out_temp_real_V_fu_112(30) <= '1';
                    out_temp_real_V_fu_112(31) <= '1';
                elsif ((qam_num_2_reload_read_read_fu_120_p2 = ap_const_lv32_4)) then 
                                        out_temp_real_V_fu_112(31 downto 1) <= select_ln110_fu_250_p3(31 downto 1);
                end if;
            end if; 
        end if;
    end process;
    out_temp_real_V_fu_112(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, data_in_TVALID, icmp_ln69_fu_206_p2, data_out_TREADY, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= (((data_out_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln69_fu_206_p2 = ap_const_lv1_1) and (data_in_TVALID = ap_const_logic_0) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, data_in_TVALID, icmp_ln69_fu_206_p2, data_out_TREADY, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= (((data_out_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln69_fu_206_p2 = ap_const_lv1_1) and (data_in_TVALID = ap_const_logic_0) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, data_in_TVALID, icmp_ln69_fu_206_p2, data_out_TREADY, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= (((data_out_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln69_fu_206_p2 = ap_const_lv1_1) and (data_in_TVALID = ap_const_logic_0) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(data_in_TVALID, icmp_ln69_fu_206_p2)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((icmp_ln69_fu_206_p2 = ap_const_lv1_1) and (data_in_TVALID = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(data_out_TREADY)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (data_out_TREADY = ap_const_logic_0);
    end process;


    ap_condition_131_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln69_fu_206_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_131 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln69_fu_206_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_297_assign_proc : process(qam_num_2_reload_read_read_fu_120_p2, trunc_ln_fu_291_p4)
    begin
                ap_condition_297 <= (not((trunc_ln_fu_291_p4 = ap_const_lv62_0)) and not((trunc_ln_fu_291_p4 = ap_const_lv62_1)) and (qam_num_2_reload_read_read_fu_120_p2 = ap_const_lv32_10));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln69_fu_206_p2, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln69_fu_206_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_out_temp_imag_V_1_phi_fu_184_p6_assign_proc : process(icmp_ln69_fu_206_p2, qam_num_2_reload_read_read_fu_120_p2, ret_fu_268_p1, select_ln29_1_cast_fu_278_p3, ap_phi_reg_pp0_iter0_out_temp_imag_V_1_reg_181)
    begin
        if (((qam_num_2_reload_read_read_fu_120_p2 = ap_const_lv32_10) and (icmp_ln69_fu_206_p2 = ap_const_lv1_1))) then
            if ((ret_fu_268_p1 = ap_const_lv2_1)) then 
                ap_phi_mux_out_temp_imag_V_1_phi_fu_184_p6 <= ap_const_lv3_7;
            elsif ((ret_fu_268_p1 = ap_const_lv2_0)) then 
                ap_phi_mux_out_temp_imag_V_1_phi_fu_184_p6 <= ap_const_lv3_5;
            elsif ((not((ret_fu_268_p1 = ap_const_lv2_1)) and not((ret_fu_268_p1 = ap_const_lv2_0)))) then 
                ap_phi_mux_out_temp_imag_V_1_phi_fu_184_p6 <= select_ln29_1_cast_fu_278_p3;
            else 
                ap_phi_mux_out_temp_imag_V_1_phi_fu_184_p6 <= ap_phi_reg_pp0_iter0_out_temp_imag_V_1_reg_181;
            end if;
        else 
            ap_phi_mux_out_temp_imag_V_1_phi_fu_184_p6 <= ap_phi_reg_pp0_iter0_out_temp_imag_V_1_reg_181;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_out_temp_imag_V_1_reg_181 <= "XXX";

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_k_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, k_fu_108, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_k_load <= ap_const_lv31_0;
        else 
            ap_sig_allocacmp_k_load <= k_fu_108;
        end if; 
    end process;


    data_in_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, data_in_TVALID, icmp_ln69_fu_206_p2, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln69_fu_206_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_in_TDATA_blk_n <= data_in_TVALID;
        else 
            data_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_in_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln69_fu_206_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln69_fu_206_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_in_TREADY <= ap_const_logic_1;
        else 
            data_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    data_out_TDATA <= (out_temp_real_V_fu_112 & out_temp_imag_V_fu_116);

    data_out_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, data_out_TREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_out_TDATA_blk_n <= data_out_TREADY;
        else 
            data_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_out_TDEST <= ap_const_lv1_0;
    data_out_TID <= ap_const_lv1_0;
    data_out_TKEEP <= ap_const_lv8_0;
    data_out_TLAST <= ap_const_lv1_0;
    data_out_TSTRB <= ap_const_lv8_0;
    data_out_TUSER <= ap_const_lv1_0;

    data_out_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_out_TVALID <= ap_const_logic_1;
        else 
            data_out_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1049_1_fu_272_p2 <= "1" when (ret_fu_268_p1 = ap_const_lv2_2) else "0";
    icmp_ln1049_2_fu_321_p2 <= "1" when (trunc_ln_fu_291_p4 = ap_const_lv62_2) else "0";
    icmp_ln1049_fu_244_p2 <= "1" when (tmp_fu_234_p4 = ap_const_lv63_0) else "0";
    icmp_ln69_fu_206_p2 <= "1" when (signed(k_cast_fu_202_p1) < signed(mul)) else "0";
    k_1_fu_212_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_k_load) + unsigned(ap_const_lv31_1));
    k_cast_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_k_load),32));
    qam_num_2_reload_read_read_fu_120_p2 <= qam_num_2_reload;
    ret_1_fu_222_p1 <= data_in_TDATA(1 - 1 downto 0);
    ret_fu_268_p1 <= data_in_TDATA(2 - 1 downto 0);
    select_ln1049_fu_226_p3 <= 
        ap_const_lv32_1 when (ret_1_fu_222_p1(0) = '1') else 
        ap_const_lv32_FFFFFFFF;
    select_ln110_fu_250_p3 <= 
        ap_const_lv32_FFFFFFFF when (icmp_ln1049_fu_244_p2(0) = '1') else 
        ap_const_lv32_1;
    select_ln28_1_cast_fu_327_p3 <= 
        ap_const_lv32_3 when (icmp_ln1049_2_fu_321_p2(0) = '1') else 
        ap_const_lv32_1;
    select_ln29_1_cast_fu_278_p3 <= 
        ap_const_lv3_3 when (icmp_ln1049_1_fu_272_p2(0) = '1') else 
        ap_const_lv3_1;
        sext_ln29_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_out_temp_imag_V_1_phi_fu_184_p6),32));

    tmp_fu_234_p4 <= data_in_TDATA(63 downto 1);
    trunc_ln_fu_291_p4 <= data_in_TDATA(63 downto 2);
end behav;
