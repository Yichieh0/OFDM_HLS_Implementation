-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity equalizer_pilot_removal_equalizer_pilot_removal_Pipeline_VITIS_LOOP_129_4_VITIS_LOOP_130_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_in_TVALID : IN STD_LOGIC;
    data_out_TREADY : IN STD_LOGIC;
    zext_ln129 : IN STD_LOGIC_VECTOR (37 downto 0);
    data_in_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    data_in_TREADY : OUT STD_LOGIC;
    data_in_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    data_in_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    data_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    data_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    data_in_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    data_in_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    pilot_width_4_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    data_out_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    data_out_TVALID : OUT STD_LOGIC;
    data_out_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_out_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    data_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    data_out_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    data_out_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of equalizer_pilot_removal_equalizer_pilot_removal_Pipeline_VITIS_LOOP_129_4_VITIS_LOOP_130_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv38_0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000000";
    constant ap_const_lv38_1 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv37_194C5 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000011001010011000101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln129_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal icmp_ln131_reg_531 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln131_reg_531_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state16_io : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal data_in_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal data_out_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal empty_reg_520_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_reg_520_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_520_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_520_3 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_4 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_5 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_6 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter2_reg_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_reg_520_pp0_iter2_reg_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_520_pp0_iter2_reg_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_520_pp0_iter2_reg_3 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter2_reg_4 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter2_reg_5 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter2_reg_6 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter3_reg_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_reg_520_pp0_iter3_reg_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_520_pp0_iter3_reg_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_520_pp0_iter3_reg_3 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter3_reg_4 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter3_reg_5 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter3_reg_6 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter4_reg_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_reg_520_pp0_iter4_reg_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_520_pp0_iter4_reg_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_520_pp0_iter4_reg_3 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter4_reg_4 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter4_reg_5 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter4_reg_6 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter5_reg_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_reg_520_pp0_iter5_reg_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_520_pp0_iter5_reg_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_520_pp0_iter5_reg_3 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter5_reg_4 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter5_reg_5 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter5_reg_6 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter6_reg_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_reg_520_pp0_iter6_reg_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_520_pp0_iter6_reg_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_520_pp0_iter6_reg_3 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter6_reg_4 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter6_reg_5 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter6_reg_6 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter7_reg_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_reg_520_pp0_iter7_reg_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_520_pp0_iter7_reg_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_520_pp0_iter7_reg_3 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter7_reg_4 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter7_reg_5 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter7_reg_6 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter8_reg_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_reg_520_pp0_iter8_reg_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_520_pp0_iter8_reg_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_520_pp0_iter8_reg_3 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter8_reg_4 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter8_reg_5 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter8_reg_6 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter9_reg_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_reg_520_pp0_iter9_reg_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_520_pp0_iter9_reg_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_520_pp0_iter9_reg_3 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter9_reg_4 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter9_reg_5 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter9_reg_6 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter10_reg_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_reg_520_pp0_iter10_reg_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_520_pp0_iter10_reg_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_520_pp0_iter10_reg_3 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter10_reg_4 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter10_reg_5 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter10_reg_6 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter11_reg_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_reg_520_pp0_iter11_reg_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_520_pp0_iter11_reg_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_520_pp0_iter11_reg_3 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter11_reg_4 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter11_reg_5 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_520_pp0_iter11_reg_6 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln131_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln131_reg_531_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_028_load_reg_545 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_028_load_reg_545_pp0_iter14_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_load_reg_550 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_load_reg_550_pp0_iter14_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_load_reg_555 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_load_reg_555_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_load_reg_560 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_load_reg_560_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_load_reg_565 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_load_reg_565_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_load_reg_570 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_load_reg_570_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_96 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_3_fu_241_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal indvar_flatten7_fu_100 : STD_LOGIC_VECTOR (37 downto 0);
    signal add_ln129_fu_209_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal p_Val2_2_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_6_fu_382_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_7_fu_394_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_112 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_116 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_120 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_124 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_128 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_132 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln130_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_fu_224_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_236_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_236_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln131_fu_257_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_fu_270_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Result_5_fu_280_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_425_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal grp_fu_432_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal in_re_temp_V_fu_364_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal in_im_temp_V_fu_373_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_425_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_432_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_236_ce : STD_LOGIC;
    signal grp_fu_425_ce : STD_LOGIC;
    signal grp_fu_432_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_236_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component equalizer_pilot_removal_srem_8ns_32ns_8_12_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component equalizer_pilot_removal_mul_mul_22s_17ns_37_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (21 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (36 downto 0) );
    end component;


    component equalizer_pilot_removal_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    srem_8ns_32ns_8_12_1_U72 : component equalizer_pilot_removal_srem_8ns_32ns_8_12_1
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 8,
        din1_WIDTH => 32,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_236_p0,
        din1 => pilot_width_4_reload,
        ce => grp_fu_236_ce,
        dout => grp_fu_236_p2);

    mul_mul_22s_17ns_37_4_1_U73 : component equalizer_pilot_removal_mul_mul_22s_17ns_37_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 22,
        din1_WIDTH => 17,
        dout_WIDTH => 37)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_Result_s_fu_270_p4,
        din1 => grp_fu_425_p1,
        ce => grp_fu_425_ce,
        dout => grp_fu_425_p2);

    mul_mul_22s_17ns_37_4_1_U74 : component equalizer_pilot_removal_mul_mul_22s_17ns_37_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 22,
        din1_WIDTH => 17,
        dout_WIDTH => 37)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_Result_5_fu_280_p1,
        din1 => grp_fu_432_p1,
        ce => grp_fu_432_ce,
        dout => grp_fu_432_p2);

    flow_control_loop_pipe_sequential_init_U : component equalizer_pilot_removal_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter14_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_96 <= ap_const_lv7_0;
                elsif (((icmp_ln129_fu_204_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_96 <= i_3_fu_241_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten7_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten7_fu_100 <= ap_const_lv38_0;
                elsif (((icmp_ln129_fu_204_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten7_fu_100 <= add_ln129_fu_209_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                empty_reg_520_pp0_iter10_reg_0 <= empty_reg_520_pp0_iter9_reg_0;
                empty_reg_520_pp0_iter10_reg_1 <= empty_reg_520_pp0_iter9_reg_1;
                empty_reg_520_pp0_iter10_reg_2 <= empty_reg_520_pp0_iter9_reg_2;
                empty_reg_520_pp0_iter10_reg_3 <= empty_reg_520_pp0_iter9_reg_3;
                empty_reg_520_pp0_iter10_reg_4 <= empty_reg_520_pp0_iter9_reg_4;
                empty_reg_520_pp0_iter10_reg_5 <= empty_reg_520_pp0_iter9_reg_5;
                empty_reg_520_pp0_iter10_reg_6 <= empty_reg_520_pp0_iter9_reg_6;
                empty_reg_520_pp0_iter11_reg_0 <= empty_reg_520_pp0_iter10_reg_0;
                empty_reg_520_pp0_iter11_reg_1 <= empty_reg_520_pp0_iter10_reg_1;
                empty_reg_520_pp0_iter11_reg_2 <= empty_reg_520_pp0_iter10_reg_2;
                empty_reg_520_pp0_iter11_reg_3 <= empty_reg_520_pp0_iter10_reg_3;
                empty_reg_520_pp0_iter11_reg_4 <= empty_reg_520_pp0_iter10_reg_4;
                empty_reg_520_pp0_iter11_reg_5 <= empty_reg_520_pp0_iter10_reg_5;
                empty_reg_520_pp0_iter11_reg_6 <= empty_reg_520_pp0_iter10_reg_6;
                empty_reg_520_pp0_iter2_reg_0 <= empty_reg_520_0;
                empty_reg_520_pp0_iter2_reg_1 <= empty_reg_520_1;
                empty_reg_520_pp0_iter2_reg_2 <= empty_reg_520_2;
                empty_reg_520_pp0_iter2_reg_3 <= empty_reg_520_3;
                empty_reg_520_pp0_iter2_reg_4 <= empty_reg_520_4;
                empty_reg_520_pp0_iter2_reg_5 <= empty_reg_520_5;
                empty_reg_520_pp0_iter2_reg_6 <= empty_reg_520_6;
                empty_reg_520_pp0_iter3_reg_0 <= empty_reg_520_pp0_iter2_reg_0;
                empty_reg_520_pp0_iter3_reg_1 <= empty_reg_520_pp0_iter2_reg_1;
                empty_reg_520_pp0_iter3_reg_2 <= empty_reg_520_pp0_iter2_reg_2;
                empty_reg_520_pp0_iter3_reg_3 <= empty_reg_520_pp0_iter2_reg_3;
                empty_reg_520_pp0_iter3_reg_4 <= empty_reg_520_pp0_iter2_reg_4;
                empty_reg_520_pp0_iter3_reg_5 <= empty_reg_520_pp0_iter2_reg_5;
                empty_reg_520_pp0_iter3_reg_6 <= empty_reg_520_pp0_iter2_reg_6;
                empty_reg_520_pp0_iter4_reg_0 <= empty_reg_520_pp0_iter3_reg_0;
                empty_reg_520_pp0_iter4_reg_1 <= empty_reg_520_pp0_iter3_reg_1;
                empty_reg_520_pp0_iter4_reg_2 <= empty_reg_520_pp0_iter3_reg_2;
                empty_reg_520_pp0_iter4_reg_3 <= empty_reg_520_pp0_iter3_reg_3;
                empty_reg_520_pp0_iter4_reg_4 <= empty_reg_520_pp0_iter3_reg_4;
                empty_reg_520_pp0_iter4_reg_5 <= empty_reg_520_pp0_iter3_reg_5;
                empty_reg_520_pp0_iter4_reg_6 <= empty_reg_520_pp0_iter3_reg_6;
                empty_reg_520_pp0_iter5_reg_0 <= empty_reg_520_pp0_iter4_reg_0;
                empty_reg_520_pp0_iter5_reg_1 <= empty_reg_520_pp0_iter4_reg_1;
                empty_reg_520_pp0_iter5_reg_2 <= empty_reg_520_pp0_iter4_reg_2;
                empty_reg_520_pp0_iter5_reg_3 <= empty_reg_520_pp0_iter4_reg_3;
                empty_reg_520_pp0_iter5_reg_4 <= empty_reg_520_pp0_iter4_reg_4;
                empty_reg_520_pp0_iter5_reg_5 <= empty_reg_520_pp0_iter4_reg_5;
                empty_reg_520_pp0_iter5_reg_6 <= empty_reg_520_pp0_iter4_reg_6;
                empty_reg_520_pp0_iter6_reg_0 <= empty_reg_520_pp0_iter5_reg_0;
                empty_reg_520_pp0_iter6_reg_1 <= empty_reg_520_pp0_iter5_reg_1;
                empty_reg_520_pp0_iter6_reg_2 <= empty_reg_520_pp0_iter5_reg_2;
                empty_reg_520_pp0_iter6_reg_3 <= empty_reg_520_pp0_iter5_reg_3;
                empty_reg_520_pp0_iter6_reg_4 <= empty_reg_520_pp0_iter5_reg_4;
                empty_reg_520_pp0_iter6_reg_5 <= empty_reg_520_pp0_iter5_reg_5;
                empty_reg_520_pp0_iter6_reg_6 <= empty_reg_520_pp0_iter5_reg_6;
                empty_reg_520_pp0_iter7_reg_0 <= empty_reg_520_pp0_iter6_reg_0;
                empty_reg_520_pp0_iter7_reg_1 <= empty_reg_520_pp0_iter6_reg_1;
                empty_reg_520_pp0_iter7_reg_2 <= empty_reg_520_pp0_iter6_reg_2;
                empty_reg_520_pp0_iter7_reg_3 <= empty_reg_520_pp0_iter6_reg_3;
                empty_reg_520_pp0_iter7_reg_4 <= empty_reg_520_pp0_iter6_reg_4;
                empty_reg_520_pp0_iter7_reg_5 <= empty_reg_520_pp0_iter6_reg_5;
                empty_reg_520_pp0_iter7_reg_6 <= empty_reg_520_pp0_iter6_reg_6;
                empty_reg_520_pp0_iter8_reg_0 <= empty_reg_520_pp0_iter7_reg_0;
                empty_reg_520_pp0_iter8_reg_1 <= empty_reg_520_pp0_iter7_reg_1;
                empty_reg_520_pp0_iter8_reg_2 <= empty_reg_520_pp0_iter7_reg_2;
                empty_reg_520_pp0_iter8_reg_3 <= empty_reg_520_pp0_iter7_reg_3;
                empty_reg_520_pp0_iter8_reg_4 <= empty_reg_520_pp0_iter7_reg_4;
                empty_reg_520_pp0_iter8_reg_5 <= empty_reg_520_pp0_iter7_reg_5;
                empty_reg_520_pp0_iter8_reg_6 <= empty_reg_520_pp0_iter7_reg_6;
                empty_reg_520_pp0_iter9_reg_0 <= empty_reg_520_pp0_iter8_reg_0;
                empty_reg_520_pp0_iter9_reg_1 <= empty_reg_520_pp0_iter8_reg_1;
                empty_reg_520_pp0_iter9_reg_2 <= empty_reg_520_pp0_iter8_reg_2;
                empty_reg_520_pp0_iter9_reg_3 <= empty_reg_520_pp0_iter8_reg_3;
                empty_reg_520_pp0_iter9_reg_4 <= empty_reg_520_pp0_iter8_reg_4;
                empty_reg_520_pp0_iter9_reg_5 <= empty_reg_520_pp0_iter8_reg_5;
                empty_reg_520_pp0_iter9_reg_6 <= empty_reg_520_pp0_iter8_reg_6;
                icmp_ln131_reg_531 <= icmp_ln131_fu_261_p2;
                icmp_ln131_reg_531_pp0_iter13_reg <= icmp_ln131_reg_531;
                icmp_ln131_reg_531_pp0_iter14_reg <= icmp_ln131_reg_531_pp0_iter13_reg;
                p_028_load_reg_545_pp0_iter14_reg <= p_028_load_reg_545;
                tmp_10_load_reg_565_pp0_iter14_reg <= tmp_10_load_reg_565;
                tmp_11_load_reg_570_pp0_iter14_reg <= tmp_11_load_reg_570;
                tmp_7_load_reg_550_pp0_iter14_reg <= tmp_7_load_reg_550;
                tmp_8_load_reg_555_pp0_iter14_reg <= tmp_8_load_reg_555;
                tmp_9_load_reg_560_pp0_iter14_reg <= tmp_9_load_reg_560;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_fu_204_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_reg_520_0 <= data_in_TDATA;
                empty_reg_520_1 <= data_in_TKEEP;
                empty_reg_520_2 <= data_in_TSTRB;
                empty_reg_520_3 <= data_in_TUSER;
                empty_reg_520_4 <= data_in_TLAST;
                empty_reg_520_5 <= data_in_TID;
                empty_reg_520_6 <= data_in_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln131_reg_531 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_028_load_reg_545 <= tmp_fu_112;
                tmp_10_load_reg_565 <= tmp_10_fu_128;
                tmp_11_load_reg_570 <= tmp_11_fu_132;
                tmp_7_load_reg_550 <= tmp_7_fu_116;
                tmp_8_load_reg_555 <= tmp_8_fu_120;
                tmp_9_load_reg_560 <= tmp_9_fu_124;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln131_reg_531_pp0_iter14_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Val2_2_fu_104 <= p_Result_6_fu_382_p5;
                p_Val2_s_fu_108 <= p_Result_7_fu_394_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (icmp_ln131_fu_261_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_10_fu_128 <= empty_reg_520_pp0_iter11_reg_5;
                tmp_11_fu_132 <= empty_reg_520_pp0_iter11_reg_6;
                tmp_7_fu_116 <= empty_reg_520_pp0_iter11_reg_2;
                tmp_8_fu_120 <= empty_reg_520_pp0_iter11_reg_3;
                tmp_9_fu_124 <= empty_reg_520_pp0_iter11_reg_4;
                tmp_fu_112 <= empty_reg_520_pp0_iter11_reg_1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln129_fu_209_p2 <= std_logic_vector(unsigned(indvar_flatten7_fu_100) + unsigned(ap_const_lv38_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter15, data_in_TVALID, icmp_ln129_fu_204_p2, data_out_TREADY, icmp_ln131_reg_531_pp0_iter14_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln131_reg_531_pp0_iter14_reg = ap_const_lv1_0) and (data_out_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1)) or ((icmp_ln129_fu_204_p2 = ap_const_lv1_0) and (data_in_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter15, data_in_TVALID, icmp_ln129_fu_204_p2, data_out_TREADY, icmp_ln131_reg_531_pp0_iter14_reg, ap_block_state16_io)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln129_fu_204_p2 = ap_const_lv1_0) and (data_in_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state16_io) or ((icmp_ln131_reg_531_pp0_iter14_reg = ap_const_lv1_0) and (data_out_TREADY = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter15, data_in_TVALID, icmp_ln129_fu_204_p2, data_out_TREADY, icmp_ln131_reg_531_pp0_iter14_reg, ap_block_state16_io)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln129_fu_204_p2 = ap_const_lv1_0) and (data_in_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state16_io) or ((icmp_ln131_reg_531_pp0_iter14_reg = ap_const_lv1_0) and (data_out_TREADY = ap_const_logic_0)))));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state16_io_assign_proc : process(data_out_TREADY, icmp_ln131_reg_531_pp0_iter14_reg)
    begin
                ap_block_state16_io <= ((icmp_ln131_reg_531_pp0_iter14_reg = ap_const_lv1_0) and (data_out_TREADY = ap_const_logic_0));
    end process;


    ap_block_state16_pp0_stage0_iter15_assign_proc : process(data_out_TREADY, icmp_ln131_reg_531_pp0_iter14_reg)
    begin
                ap_block_state16_pp0_stage0_iter15 <= ((icmp_ln131_reg_531_pp0_iter14_reg = ap_const_lv1_0) and (data_out_TREADY = ap_const_logic_0));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(data_in_TVALID, icmp_ln129_fu_204_p2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((icmp_ln129_fu_204_p2 = ap_const_lv1_0) and (data_in_TVALID = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln129_fu_204_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln129_fu_204_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter14_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter14_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    data_in_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, data_in_TVALID, icmp_ln129_fu_204_p2, ap_block_pp0_stage0)
    begin
        if (((icmp_ln129_fu_204_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_in_TDATA_blk_n <= data_in_TVALID;
        else 
            data_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_in_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln129_fu_204_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln129_fu_204_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_in_TREADY <= ap_const_logic_1;
        else 
            data_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    data_out_TDATA <= (p_Result_6_fu_382_p5 & p_Result_7_fu_394_p5);

    data_out_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter15, data_out_TREADY, icmp_ln131_reg_531_pp0_iter14_reg, ap_block_pp0_stage0)
    begin
        if (((icmp_ln131_reg_531_pp0_iter14_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_out_TDATA_blk_n <= data_out_TREADY;
        else 
            data_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_out_TDEST <= tmp_11_load_reg_570_pp0_iter14_reg;
    data_out_TID <= tmp_10_load_reg_565_pp0_iter14_reg;
    data_out_TKEEP <= p_028_load_reg_545_pp0_iter14_reg;
    data_out_TLAST <= tmp_9_load_reg_560_pp0_iter14_reg;
    data_out_TSTRB <= tmp_7_load_reg_550_pp0_iter14_reg;
    data_out_TUSER <= tmp_8_load_reg_555_pp0_iter14_reg;

    data_out_TVALID_assign_proc : process(ap_enable_reg_pp0_iter15, icmp_ln131_reg_531_pp0_iter14_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln131_reg_531_pp0_iter14_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_out_TVALID <= ap_const_logic_1;
        else 
            data_out_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_236_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_236_ce <= ap_const_logic_1;
        else 
            grp_fu_236_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_236_p0 <= grp_fu_236_p00(8 - 1 downto 0);
    grp_fu_236_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_fu_224_p3),32));

    grp_fu_425_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_425_ce <= ap_const_logic_1;
        else 
            grp_fu_425_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_425_p1 <= ap_const_lv37_194C5(17 - 1 downto 0);

    grp_fu_432_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_432_ce <= ap_const_logic_1;
        else 
            grp_fu_432_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_432_p1 <= ap_const_lv37_194C5(17 - 1 downto 0);
    i_3_fu_241_p2 <= std_logic_vector(unsigned(select_ln28_fu_224_p3) + unsigned(ap_const_lv7_1));
    icmp_ln129_fu_204_p2 <= "1" when (indvar_flatten7_fu_100 = zext_ln129) else "0";
    icmp_ln130_fu_218_p2 <= "1" when (i_fu_96 = ap_const_lv7_40) else "0";
    icmp_ln131_fu_261_p2 <= "1" when (trunc_ln131_fu_257_p1 = ap_const_lv8_0) else "0";
    in_im_temp_V_fu_373_p4 <= grp_fu_432_p2(36 downto 15);
    in_re_temp_V_fu_364_p4 <= grp_fu_425_p2(36 downto 15);
    p_Result_5_fu_280_p1 <= empty_reg_520_pp0_iter11_reg_0(22 - 1 downto 0);
    p_Result_6_fu_382_p5 <= (p_Val2_2_fu_104(31 downto 22) & in_re_temp_V_fu_364_p4);
    p_Result_7_fu_394_p5 <= (p_Val2_s_fu_108(31 downto 22) & in_im_temp_V_fu_373_p4);
    p_Result_s_fu_270_p4 <= empty_reg_520_pp0_iter11_reg_0(53 downto 32);
    select_ln28_fu_224_p3 <= 
        ap_const_lv7_0 when (icmp_ln130_fu_218_p2(0) = '1') else 
        i_fu_96;
    trunc_ln131_fu_257_p1 <= grp_fu_236_p2(8 - 1 downto 0);
end behav;
