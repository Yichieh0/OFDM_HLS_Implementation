// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module syn_CP_removal_syn_CP_removal_Pipeline_VITIS_LOOP_109_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        phi_real_V_0_address0,
        phi_real_V_0_ce0,
        phi_real_V_0_we0,
        phi_real_V_0_d0,
        phi_real_V_1_address0,
        phi_real_V_1_ce0,
        phi_real_V_1_we0,
        phi_real_V_1_d0,
        phi_real_V_2_address0,
        phi_real_V_2_ce0,
        phi_real_V_2_we0,
        phi_real_V_2_d0,
        phi_real_V_3_address0,
        phi_real_V_3_ce0,
        phi_real_V_3_we0,
        phi_real_V_3_d0,
        phi_imag_V_0_address0,
        phi_imag_V_0_ce0,
        phi_imag_V_0_we0,
        phi_imag_V_0_d0,
        phi_imag_V_1_address0,
        phi_imag_V_1_ce0,
        phi_imag_V_1_we0,
        phi_imag_V_1_d0,
        phi_imag_V_2_address0,
        phi_imag_V_2_ce0,
        phi_imag_V_2_we0,
        phi_imag_V_2_d0,
        phi_imag_V_3_address0,
        phi_imag_V_3_ce0,
        phi_imag_V_3_we0,
        phi_imag_V_3_d0,
        power_V_0_address0,
        power_V_0_ce0,
        power_V_0_we0,
        power_V_0_d0,
        power_V_1_address0,
        power_V_1_ce0,
        power_V_1_we0,
        power_V_1_d0,
        power_V_2_address0,
        power_V_2_ce0,
        power_V_2_we0,
        power_V_2_d0,
        power_V_3_address0,
        power_V_3_ce0,
        power_V_3_we0,
        power_V_3_d0,
        power_2_V_0_address0,
        power_2_V_0_ce0,
        power_2_V_0_we0,
        power_2_V_0_d0,
        power_2_V_1_address0,
        power_2_V_1_ce0,
        power_2_V_1_we0,
        power_2_V_1_d0,
        power_2_V_2_address0,
        power_2_V_2_ce0,
        power_2_V_2_we0,
        power_2_V_2_d0,
        power_2_V_3_address0,
        power_2_V_3_ce0,
        power_2_V_3_we0,
        power_2_V_3_d0
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] phi_real_V_0_address0;
output   phi_real_V_0_ce0;
output   phi_real_V_0_we0;
output  [26:0] phi_real_V_0_d0;
output  [4:0] phi_real_V_1_address0;
output   phi_real_V_1_ce0;
output   phi_real_V_1_we0;
output  [26:0] phi_real_V_1_d0;
output  [4:0] phi_real_V_2_address0;
output   phi_real_V_2_ce0;
output   phi_real_V_2_we0;
output  [26:0] phi_real_V_2_d0;
output  [4:0] phi_real_V_3_address0;
output   phi_real_V_3_ce0;
output   phi_real_V_3_we0;
output  [26:0] phi_real_V_3_d0;
output  [4:0] phi_imag_V_0_address0;
output   phi_imag_V_0_ce0;
output   phi_imag_V_0_we0;
output  [26:0] phi_imag_V_0_d0;
output  [4:0] phi_imag_V_1_address0;
output   phi_imag_V_1_ce0;
output   phi_imag_V_1_we0;
output  [26:0] phi_imag_V_1_d0;
output  [4:0] phi_imag_V_2_address0;
output   phi_imag_V_2_ce0;
output   phi_imag_V_2_we0;
output  [26:0] phi_imag_V_2_d0;
output  [4:0] phi_imag_V_3_address0;
output   phi_imag_V_3_ce0;
output   phi_imag_V_3_we0;
output  [26:0] phi_imag_V_3_d0;
output  [4:0] power_V_0_address0;
output   power_V_0_ce0;
output   power_V_0_we0;
output  [26:0] power_V_0_d0;
output  [4:0] power_V_1_address0;
output   power_V_1_ce0;
output   power_V_1_we0;
output  [26:0] power_V_1_d0;
output  [4:0] power_V_2_address0;
output   power_V_2_ce0;
output   power_V_2_we0;
output  [26:0] power_V_2_d0;
output  [4:0] power_V_3_address0;
output   power_V_3_ce0;
output   power_V_3_we0;
output  [26:0] power_V_3_d0;
output  [4:0] power_2_V_0_address0;
output   power_2_V_0_ce0;
output   power_2_V_0_we0;
output  [26:0] power_2_V_0_d0;
output  [4:0] power_2_V_1_address0;
output   power_2_V_1_ce0;
output   power_2_V_1_we0;
output  [26:0] power_2_V_1_d0;
output  [4:0] power_2_V_2_address0;
output   power_2_V_2_ce0;
output   power_2_V_2_we0;
output  [26:0] power_2_V_2_d0;
output  [4:0] power_2_V_3_address0;
output   power_2_V_3_ce0;
output   power_2_V_3_we0;
output  [26:0] power_2_V_3_d0;

reg ap_idle;
reg phi_real_V_0_ce0;
reg phi_real_V_0_we0;
reg phi_real_V_1_ce0;
reg phi_real_V_1_we0;
reg phi_real_V_2_ce0;
reg phi_real_V_2_we0;
reg phi_real_V_3_ce0;
reg phi_real_V_3_we0;
reg phi_imag_V_0_ce0;
reg phi_imag_V_0_we0;
reg phi_imag_V_1_ce0;
reg phi_imag_V_1_we0;
reg phi_imag_V_2_ce0;
reg phi_imag_V_2_we0;
reg phi_imag_V_3_ce0;
reg phi_imag_V_3_we0;
reg power_V_0_ce0;
reg power_V_0_we0;
reg power_V_1_ce0;
reg power_V_1_we0;
reg power_V_2_ce0;
reg power_V_2_we0;
reg power_V_3_ce0;
reg power_V_3_we0;
reg power_2_V_0_ce0;
reg power_2_V_0_we0;
reg power_2_V_1_ce0;
reg power_2_V_1_we0;
reg power_2_V_2_ce0;
reg power_2_V_2_we0;
reg power_2_V_3_ce0;
reg power_2_V_3_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln109_fu_332_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln110_fu_366_p1;
reg   [6:0] phi_urem28_fu_78;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_phi_urem28_load_1;
reg   [6:0] ap_sig_allocacmp_phi_urem28_load;
wire   [6:0] idx_urem30_fu_401_p3;
reg   [13:0] phi_mul26_fu_82;
reg   [13:0] ap_sig_allocacmp_phi_mul26_load;
wire   [13:0] add_ln110_fu_350_p2;
reg   [6:0] i_4_fu_86;
reg   [6:0] ap_sig_allocacmp_i;
wire   [6:0] add_ln109_fu_338_p2;
wire   [1:0] trunc_ln4_fu_356_p4;
wire   [6:0] next_urem29_fu_389_p2;
wire   [0:0] empty_48_fu_395_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

syn_CP_removal_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln109_fu_332_p2 == 1'd0)) begin
            i_4_fu_86 <= add_ln109_fu_338_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_4_fu_86 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln109_fu_332_p2 == 1'd0)) begin
            phi_mul26_fu_82 <= add_ln110_fu_350_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            phi_mul26_fu_82 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln109_fu_332_p2 == 1'd0)) begin
            phi_urem28_fu_78 <= idx_urem30_fu_401_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            phi_urem28_fu_78 <= 7'd0;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln109_fu_332_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 7'd0;
    end else begin
        ap_sig_allocacmp_i = i_4_fu_86;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_phi_mul26_load = 14'd0;
    end else begin
        ap_sig_allocacmp_phi_mul26_load = phi_mul26_fu_82;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_phi_urem28_load = 7'd0;
    end else begin
        ap_sig_allocacmp_phi_urem28_load = phi_urem28_fu_78;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_phi_urem28_load_1 = 7'd0;
    end else begin
        ap_sig_allocacmp_phi_urem28_load_1 = phi_urem28_fu_78;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_imag_V_0_ce0 = 1'b1;
    end else begin
        phi_imag_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln109_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln4_fu_356_p4 == 2'd0))) begin
        phi_imag_V_0_we0 = 1'b1;
    end else begin
        phi_imag_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_imag_V_1_ce0 = 1'b1;
    end else begin
        phi_imag_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln109_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln4_fu_356_p4 == 2'd1))) begin
        phi_imag_V_1_we0 = 1'b1;
    end else begin
        phi_imag_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_imag_V_2_ce0 = 1'b1;
    end else begin
        phi_imag_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln109_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln4_fu_356_p4 == 2'd2))) begin
        phi_imag_V_2_we0 = 1'b1;
    end else begin
        phi_imag_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_imag_V_3_ce0 = 1'b1;
    end else begin
        phi_imag_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln109_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln4_fu_356_p4 == 2'd3))) begin
        phi_imag_V_3_we0 = 1'b1;
    end else begin
        phi_imag_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_real_V_0_ce0 = 1'b1;
    end else begin
        phi_real_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln109_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln4_fu_356_p4 == 2'd0))) begin
        phi_real_V_0_we0 = 1'b1;
    end else begin
        phi_real_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_real_V_1_ce0 = 1'b1;
    end else begin
        phi_real_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln109_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln4_fu_356_p4 == 2'd1))) begin
        phi_real_V_1_we0 = 1'b1;
    end else begin
        phi_real_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_real_V_2_ce0 = 1'b1;
    end else begin
        phi_real_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln109_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln4_fu_356_p4 == 2'd2))) begin
        phi_real_V_2_we0 = 1'b1;
    end else begin
        phi_real_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_real_V_3_ce0 = 1'b1;
    end else begin
        phi_real_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln109_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln4_fu_356_p4 == 2'd3))) begin
        phi_real_V_3_we0 = 1'b1;
    end else begin
        phi_real_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        power_2_V_0_ce0 = 1'b1;
    end else begin
        power_2_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln109_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln4_fu_356_p4 == 2'd0))) begin
        power_2_V_0_we0 = 1'b1;
    end else begin
        power_2_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        power_2_V_1_ce0 = 1'b1;
    end else begin
        power_2_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln109_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln4_fu_356_p4 == 2'd1))) begin
        power_2_V_1_we0 = 1'b1;
    end else begin
        power_2_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        power_2_V_2_ce0 = 1'b1;
    end else begin
        power_2_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln109_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln4_fu_356_p4 == 2'd2))) begin
        power_2_V_2_we0 = 1'b1;
    end else begin
        power_2_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        power_2_V_3_ce0 = 1'b1;
    end else begin
        power_2_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln109_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln4_fu_356_p4 == 2'd3))) begin
        power_2_V_3_we0 = 1'b1;
    end else begin
        power_2_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        power_V_0_ce0 = 1'b1;
    end else begin
        power_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln109_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln4_fu_356_p4 == 2'd0))) begin
        power_V_0_we0 = 1'b1;
    end else begin
        power_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        power_V_1_ce0 = 1'b1;
    end else begin
        power_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln109_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln4_fu_356_p4 == 2'd1))) begin
        power_V_1_we0 = 1'b1;
    end else begin
        power_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        power_V_2_ce0 = 1'b1;
    end else begin
        power_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln109_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln4_fu_356_p4 == 2'd2))) begin
        power_V_2_we0 = 1'b1;
    end else begin
        power_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        power_V_3_ce0 = 1'b1;
    end else begin
        power_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln109_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (trunc_ln4_fu_356_p4 == 2'd3))) begin
        power_V_3_we0 = 1'b1;
    end else begin
        power_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln109_fu_338_p2 = (ap_sig_allocacmp_i + 7'd1);

assign add_ln110_fu_350_p2 = (ap_sig_allocacmp_phi_mul26_load + 14'd205);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_48_fu_395_p2 = ((next_urem29_fu_389_p2 < 7'd20) ? 1'b1 : 1'b0);

assign icmp_ln109_fu_332_p2 = ((ap_sig_allocacmp_i == 7'd64) ? 1'b1 : 1'b0);

assign idx_urem30_fu_401_p3 = ((empty_48_fu_395_p2[0:0] == 1'b1) ? next_urem29_fu_389_p2 : 7'd0);

assign next_urem29_fu_389_p2 = (ap_sig_allocacmp_phi_urem28_load + 7'd1);

assign phi_imag_V_0_address0 = zext_ln110_fu_366_p1;

assign phi_imag_V_0_d0 = 27'd0;

assign phi_imag_V_1_address0 = zext_ln110_fu_366_p1;

assign phi_imag_V_1_d0 = 27'd0;

assign phi_imag_V_2_address0 = zext_ln110_fu_366_p1;

assign phi_imag_V_2_d0 = 27'd0;

assign phi_imag_V_3_address0 = zext_ln110_fu_366_p1;

assign phi_imag_V_3_d0 = 27'd0;

assign phi_real_V_0_address0 = zext_ln110_fu_366_p1;

assign phi_real_V_0_d0 = 27'd0;

assign phi_real_V_1_address0 = zext_ln110_fu_366_p1;

assign phi_real_V_1_d0 = 27'd0;

assign phi_real_V_2_address0 = zext_ln110_fu_366_p1;

assign phi_real_V_2_d0 = 27'd0;

assign phi_real_V_3_address0 = zext_ln110_fu_366_p1;

assign phi_real_V_3_d0 = 27'd0;

assign power_2_V_0_address0 = zext_ln110_fu_366_p1;

assign power_2_V_0_d0 = 27'd0;

assign power_2_V_1_address0 = zext_ln110_fu_366_p1;

assign power_2_V_1_d0 = 27'd0;

assign power_2_V_2_address0 = zext_ln110_fu_366_p1;

assign power_2_V_2_d0 = 27'd0;

assign power_2_V_3_address0 = zext_ln110_fu_366_p1;

assign power_2_V_3_d0 = 27'd0;

assign power_V_0_address0 = zext_ln110_fu_366_p1;

assign power_V_0_d0 = 27'd0;

assign power_V_1_address0 = zext_ln110_fu_366_p1;

assign power_V_1_d0 = 27'd0;

assign power_V_2_address0 = zext_ln110_fu_366_p1;

assign power_V_2_d0 = 27'd0;

assign power_V_3_address0 = zext_ln110_fu_366_p1;

assign power_V_3_d0 = 27'd0;

assign trunc_ln4_fu_356_p4 = {{ap_sig_allocacmp_phi_mul26_load[13:12]}};

assign zext_ln110_fu_366_p1 = ap_sig_allocacmp_phi_urem28_load_1;

endmodule //syn_CP_removal_syn_CP_removal_Pipeline_VITIS_LOOP_109_4
