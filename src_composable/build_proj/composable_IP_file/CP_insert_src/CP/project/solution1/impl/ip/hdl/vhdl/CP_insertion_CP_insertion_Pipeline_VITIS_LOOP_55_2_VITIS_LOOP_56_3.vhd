-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CP_insertion_CP_insertion_Pipeline_VITIS_LOOP_55_2_VITIS_LOOP_56_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_in_TVALID : IN STD_LOGIC;
    data_out_TREADY : IN STD_LOGIC;
    bound : IN STD_LOGIC_VECTOR (38 downto 0);
    data_out_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    data_out_TVALID : OUT STD_LOGIC;
    data_out_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_out_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    data_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    data_out_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    data_out_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    data_in_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    data_in_TREADY : OUT STD_LOGIC;
    data_in_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    data_in_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    data_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    data_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    data_in_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    data_in_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    sub50 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of CP_insertion_CP_insertion_Pipeline_VITIS_LOOP_55_2_VITIS_LOOP_56_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv39_0 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000000";
    constant ap_const_lv39_1 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln55_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op52_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal icmp_ln57_reg_474 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_498 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op82_write_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal data_out_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal data_in_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_Result_9_reg_488 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Result_10_fu_323_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Result_10_reg_493 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln68_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_r_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal in_r_V_ce0 : STD_LOGIC;
    signal in_r_V_we0 : STD_LOGIC;
    signal in_r_V_d0 : STD_LOGIC_VECTOR (21 downto 0);
    signal in_r_V_q0 : STD_LOGIC_VECTOR (21 downto 0);
    signal in_i_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal in_i_V_ce0 : STD_LOGIC;
    signal in_i_V_we0 : STD_LOGIC;
    signal in_i_V_d0 : STD_LOGIC_VECTOR (21 downto 0);
    signal in_i_V_q0 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln640_fu_302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_cast3_fu_272_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_fu_102 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln56_fu_333_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal indvar_flatten_fu_106 : STD_LOGIC_VECTOR (38 downto 0);
    signal add_ln55_fu_249_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal p_Val2_s_fu_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_349_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_11_fu_392_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_1_fu_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_7_fu_361_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_12_fu_403_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_8_fu_373_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal p_Result_13_fu_414_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln56_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln12_fu_264_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_286_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_fu_278_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal t_cast1_fu_282_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_176 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component CP_insertion_CP_insertion_Pipeline_VITIS_LOOP_55_2_VITIS_LOOP_56_3_in_r_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (21 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component CP_insertion_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    in_r_V_U : component CP_insertion_CP_insertion_Pipeline_VITIS_LOOP_55_2_VITIS_LOOP_56_3_in_r_V
    generic map (
        DataWidth => 22,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => in_r_V_address0,
        ce0 => in_r_V_ce0,
        we0 => in_r_V_we0,
        d0 => in_r_V_d0,
        q0 => in_r_V_q0);

    in_i_V_U : component CP_insertion_CP_insertion_Pipeline_VITIS_LOOP_55_2_VITIS_LOOP_56_3_in_r_V
    generic map (
        DataWidth => 22,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => in_i_V_address0,
        ce0 => in_i_V_ce0,
        we0 => in_i_V_we0,
        d0 => in_i_V_d0,
        q0 => in_i_V_q0);

    flow_control_loop_pipe_sequential_init_U : component CP_insertion_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_106 <= ap_const_lv39_0;
                elsif (((icmp_ln55_fu_244_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten_fu_106 <= add_ln55_fu_249_p2;
                end if;
            end if; 
        end if;
    end process;

    p_Val2_1_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                if (((icmp_ln68_reg_498 = ap_const_lv1_0) and (icmp_ln57_reg_474 = ap_const_lv1_1))) then 
                    p_Val2_1_fu_114 <= p_Result_12_fu_403_p5;
                elsif ((icmp_ln57_reg_474 = ap_const_lv1_0)) then 
                    p_Val2_1_fu_114 <= p_Result_7_fu_361_p5;
                end if;
            end if; 
        end if;
    end process;

    p_Val2_s_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                if (((icmp_ln68_reg_498 = ap_const_lv1_0) and (icmp_ln57_reg_474 = ap_const_lv1_1))) then 
                    p_Val2_s_fu_110 <= p_Result_11_fu_392_p5;
                elsif ((icmp_ln57_reg_474 = ap_const_lv1_0)) then 
                    p_Val2_s_fu_110 <= p_Result_s_fu_349_p5;
                end if;
            end if; 
        end if;
    end process;

    t_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    t_fu_102 <= ap_const_lv8_0;
                elsif (((icmp_ln55_fu_244_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    t_fu_102 <= add_ln56_fu_333_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln55_fu_244_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln57_reg_474 <= icmp_ln57_fu_296_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln57_fu_296_p2 = ap_const_lv1_1) and (icmp_ln55_fu_244_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln68_reg_498 <= icmp_ln68_fu_328_p2;
                p_Result_10_reg_493 <= p_Result_10_fu_323_p1;
                p_Result_9_reg_488 <= data_in_TDATA(53 downto 32);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln55_fu_249_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_106) + unsigned(ap_const_lv39_1));
    add_ln56_fu_333_p2 <= std_logic_vector(unsigned(select_ln12_fu_264_p3) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, data_in_TVALID, ap_predicate_op52_read_state2, data_out_TREADY, icmp_ln57_reg_474, ap_predicate_op82_write_state3)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((ap_predicate_op82_write_state3 = ap_const_boolean_1) and (data_out_TREADY = ap_const_logic_0)) or ((icmp_ln57_reg_474 = ap_const_lv1_0) and (data_out_TREADY = ap_const_logic_0)))) or ((ap_predicate_op52_read_state2 = ap_const_boolean_1) and (data_in_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, data_in_TVALID, ap_predicate_op52_read_state2, data_out_TREADY, icmp_ln57_reg_474, ap_predicate_op82_write_state3, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or ((ap_predicate_op82_write_state3 = ap_const_boolean_1) and (data_out_TREADY = ap_const_logic_0)) or ((icmp_ln57_reg_474 = ap_const_lv1_0) and (data_out_TREADY = ap_const_logic_0)))) or ((ap_predicate_op52_read_state2 = ap_const_boolean_1) and (data_in_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, data_in_TVALID, ap_predicate_op52_read_state2, data_out_TREADY, icmp_ln57_reg_474, ap_predicate_op82_write_state3, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or ((ap_predicate_op82_write_state3 = ap_const_boolean_1) and (data_out_TREADY = ap_const_logic_0)) or ((icmp_ln57_reg_474 = ap_const_lv1_0) and (data_out_TREADY = ap_const_logic_0)))) or ((ap_predicate_op52_read_state2 = ap_const_boolean_1) and (data_in_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(data_in_TVALID, ap_predicate_op52_read_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((ap_predicate_op52_read_state2 = ap_const_boolean_1) and (data_in_TVALID = ap_const_logic_0));
    end process;


    ap_block_state3_io_assign_proc : process(data_out_TREADY, icmp_ln57_reg_474, ap_predicate_op82_write_state3)
    begin
                ap_block_state3_io <= (((ap_predicate_op82_write_state3 = ap_const_boolean_1) and (data_out_TREADY = ap_const_logic_0)) or ((icmp_ln57_reg_474 = ap_const_lv1_0) and (data_out_TREADY = ap_const_logic_0)));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(data_out_TREADY, icmp_ln57_reg_474, ap_predicate_op82_write_state3)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (((ap_predicate_op82_write_state3 = ap_const_boolean_1) and (data_out_TREADY = ap_const_logic_0)) or ((icmp_ln57_reg_474 = ap_const_lv1_0) and (data_out_TREADY = ap_const_logic_0)));
    end process;


    ap_condition_176_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln55_fu_244_p2, ap_block_pp0_stage0)
    begin
                ap_condition_176 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln55_fu_244_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln55_fu_244_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln55_fu_244_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_predicate_op52_read_state2_assign_proc : process(icmp_ln55_fu_244_p2, icmp_ln57_fu_296_p2)
    begin
                ap_predicate_op52_read_state2 <= ((icmp_ln57_fu_296_p2 = ap_const_lv1_1) and (icmp_ln55_fu_244_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_op82_write_state3_assign_proc : process(icmp_ln57_reg_474, icmp_ln68_reg_498)
    begin
                ap_predicate_op82_write_state3 <= ((icmp_ln68_reg_498 = ap_const_lv1_0) and (icmp_ln57_reg_474 = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    data_in_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, data_in_TVALID, ap_predicate_op52_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op52_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_in_TDATA_blk_n <= data_in_TVALID;
        else 
            data_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_in_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op52_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op52_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_in_TREADY <= ap_const_logic_1;
        else 
            data_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    data_out_TDATA_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln57_reg_474, ap_predicate_op82_write_state3, p_Result_8_fu_373_p3, ap_block_pp0_stage0_01001, p_Result_13_fu_414_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
            if ((ap_predicate_op82_write_state3 = ap_const_boolean_1)) then 
                data_out_TDATA <= p_Result_13_fu_414_p3;
            elsif ((icmp_ln57_reg_474 = ap_const_lv1_0)) then 
                data_out_TDATA <= p_Result_8_fu_373_p3;
            else 
                data_out_TDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            data_out_TDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_out_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, data_out_TREADY, icmp_ln57_reg_474, ap_predicate_op82_write_state3, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op82_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln57_reg_474 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            data_out_TDATA_blk_n <= data_out_TREADY;
        else 
            data_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_out_TDEST <= ap_const_lv1_0;
    data_out_TID <= ap_const_lv1_0;
    data_out_TKEEP <= ap_const_lv8_0;
    data_out_TLAST <= ap_const_lv1_0;
    data_out_TSTRB <= ap_const_lv8_0;
    data_out_TUSER <= ap_const_lv1_0;

    data_out_TVALID_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln57_reg_474, ap_predicate_op82_write_state3, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op82_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln57_reg_474 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            data_out_TVALID <= ap_const_logic_1;
        else 
            data_out_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_278_p1 <= select_ln12_fu_264_p3(6 - 1 downto 0);
    icmp_ln55_fu_244_p2 <= "1" when (indvar_flatten_fu_106 = bound) else "0";
    icmp_ln56_fu_258_p2 <= "1" when (t_fu_102 = ap_const_lv8_80) else "0";
    icmp_ln57_fu_296_p2 <= "1" when (tmp_fu_286_p4 = ap_const_lv2_0) else "0";
    icmp_ln68_fu_328_p2 <= "1" when (signed(t_cast1_fu_282_p1) < signed(sub50)) else "0";

    in_i_V_address0_assign_proc : process(icmp_ln57_fu_296_p2, zext_ln640_fu_302_p1, t_cast3_fu_272_p1, ap_condition_176)
    begin
        if ((ap_const_boolean_1 = ap_condition_176)) then
            if ((icmp_ln57_fu_296_p2 = ap_const_lv1_1)) then 
                in_i_V_address0 <= t_cast3_fu_272_p1(6 - 1 downto 0);
            elsif ((icmp_ln57_fu_296_p2 = ap_const_lv1_0)) then 
                in_i_V_address0 <= zext_ln640_fu_302_p1(6 - 1 downto 0);
            else 
                in_i_V_address0 <= "XXXXXX";
            end if;
        else 
            in_i_V_address0 <= "XXXXXX";
        end if; 
    end process;


    in_i_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln55_fu_244_p2, icmp_ln57_fu_296_p2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln57_fu_296_p2 = ap_const_lv1_1) and (icmp_ln55_fu_244_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln57_fu_296_p2 = ap_const_lv1_0) and (icmp_ln55_fu_244_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            in_i_V_ce0 <= ap_const_logic_1;
        else 
            in_i_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_i_V_d0 <= data_in_TDATA(22 - 1 downto 0);

    in_i_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln55_fu_244_p2, icmp_ln57_fu_296_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln57_fu_296_p2 = ap_const_lv1_1) and (icmp_ln55_fu_244_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_i_V_we0 <= ap_const_logic_1;
        else 
            in_i_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    in_r_V_address0_assign_proc : process(icmp_ln57_fu_296_p2, zext_ln640_fu_302_p1, t_cast3_fu_272_p1, ap_condition_176)
    begin
        if ((ap_const_boolean_1 = ap_condition_176)) then
            if ((icmp_ln57_fu_296_p2 = ap_const_lv1_1)) then 
                in_r_V_address0 <= t_cast3_fu_272_p1(6 - 1 downto 0);
            elsif ((icmp_ln57_fu_296_p2 = ap_const_lv1_0)) then 
                in_r_V_address0 <= zext_ln640_fu_302_p1(6 - 1 downto 0);
            else 
                in_r_V_address0 <= "XXXXXX";
            end if;
        else 
            in_r_V_address0 <= "XXXXXX";
        end if; 
    end process;


    in_r_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln55_fu_244_p2, icmp_ln57_fu_296_p2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln57_fu_296_p2 = ap_const_lv1_1) and (icmp_ln55_fu_244_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln57_fu_296_p2 = ap_const_lv1_0) and (icmp_ln55_fu_244_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            in_r_V_ce0 <= ap_const_logic_1;
        else 
            in_r_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_r_V_d0 <= data_in_TDATA(53 downto 32);

    in_r_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln55_fu_244_p2, icmp_ln57_fu_296_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln57_fu_296_p2 = ap_const_lv1_1) and (icmp_ln55_fu_244_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_r_V_we0 <= ap_const_logic_1;
        else 
            in_r_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_10_fu_323_p1 <= data_in_TDATA(22 - 1 downto 0);
    p_Result_11_fu_392_p5 <= (p_Val2_s_fu_110(31 downto 22) & p_Result_9_reg_488);
    p_Result_12_fu_403_p5 <= (p_Val2_1_fu_114(31 downto 22) & p_Result_10_reg_493);
    p_Result_13_fu_414_p3 <= (p_Result_11_fu_392_p5 & p_Result_12_fu_403_p5);
    p_Result_7_fu_361_p5 <= (p_Val2_1_fu_114(31 downto 22) & in_i_V_q0);
    p_Result_8_fu_373_p3 <= (p_Result_s_fu_349_p5 & p_Result_7_fu_361_p5);
    p_Result_s_fu_349_p5 <= (p_Val2_s_fu_110(31 downto 22) & in_r_V_q0);
    select_ln12_fu_264_p3 <= 
        ap_const_lv8_0 when (icmp_ln56_fu_258_p2(0) = '1') else 
        t_fu_102;
    t_cast1_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln12_fu_264_p3),32));
    t_cast3_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln12_fu_264_p3),64));
    tmp_fu_286_p4 <= select_ln12_fu_264_p3(7 downto 6);
    zext_ln640_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_278_p1),64));
end behav;
