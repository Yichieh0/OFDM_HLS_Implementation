-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity deQAM_deQAM_Pipeline_VITIS_LOOP_93_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    select_ln70_1_cast : IN STD_LOGIC_VECTOR (1 downto 0);
    or_ln1827_1 : IN STD_LOGIC_VECTOR (0 downto 0);
    op2_assign : IN STD_LOGIC_VECTOR (63 downto 0);
    read_in_imag_V_2 : IN STD_LOGIC_VECTOR (19 downto 0);
    select_ln93 : IN STD_LOGIC_VECTOR (2 downto 0);
    v_V_1_out : OUT STD_LOGIC_VECTOR (3 downto 0);
    v_V_1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of deQAM_deQAM_Pipeline_VITIS_LOOP_93_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal and_ln1827_1_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal select_ln93_cast_fu_108_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln93_cast_reg_267 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_V_1_reg_272 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_105_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i_i1_reg_283 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal i_V_fu_56 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_V_2_fu_218_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_V_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal v_V_1_fu_60 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln94_fu_210_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln70_1_cast_cast_fu_112_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_105_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln1827_fu_134_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_137_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln1827_fu_147_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln1827_1_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1827_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_101_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1827_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1827_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln737_1_fu_183_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln1549_fu_190_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal icmp_ln1549_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1549_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln70_fu_205_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component deQAM_dcmp_64ns_64ns_1_1_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component deQAM_uitodp_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component deQAM_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    dcmp_64ns_64ns_1_1_no_dsp_1_U21 : component deQAM_dcmp_64ns_64ns_1_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        din0 => conv_i_i1_reg_283,
        din1 => op2_assign,
        opcode => ap_const_lv5_4,
        dout => tmp_1_fu_101_p2);

    uitodp_32ns_64_2_no_dsp_1_U22 : component deQAM_uitodp_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_105_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_105_p1);

    flow_control_loop_pipe_sequential_init_U : component deQAM_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_V_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                i_V_fu_56 <= ap_const_lv4_2;
            elsif (((ap_const_lv1_1 = and_ln1827_1_fu_174_p2) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_V_fu_56 <= i_V_2_fu_218_p2;
            end if; 
        end if;
    end process;

    v_V_1_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                v_V_1_fu_60 <= select_ln70_1_cast_cast_fu_112_p1;
            elsif (((ap_const_lv1_1 = and_ln1827_1_fu_174_p2) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                v_V_1_fu_60 <= select_ln94_fu_210_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                conv_i_i1_reg_283 <= grp_fu_105_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                i_V_1_reg_272 <= ap_sig_allocacmp_i_V_1;
                select_ln93_cast_reg_267 <= select_ln93_cast_fu_108_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln70_fu_205_p2 <= std_logic_vector(unsigned(v_V_1_fu_60) + unsigned(select_ln93_cast_reg_267));
    and_ln1827_1_fu_174_p2 <= (or_ln1827_fu_163_p2 and and_ln1827_fu_169_p2);
    and_ln1827_fu_169_p2 <= (tmp_1_fu_101_p2 and or_ln1827_1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_CS_fsm_state3, and_ln1827_1_fu_174_p2)
    begin
        if (((ap_const_lv1_0 = and_ln1827_1_fu_174_p2) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state3, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_V_1_assign_proc : process(ap_CS_fsm_state1, i_V_fu_56, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i_V_1 <= ap_const_lv4_2;
        else 
            ap_sig_allocacmp_i_V_1 <= i_V_fu_56;
        end if; 
    end process;

    bitcast_ln1827_fu_134_p1 <= conv_i_i1_reg_283;
    grp_fu_105_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_V_1),32));
    i_V_2_fu_218_p2 <= std_logic_vector(unsigned(i_V_1_reg_272) + unsigned(ap_const_lv4_2));
    icmp_ln1549_fu_194_p2 <= "1" when (signed(read_in_imag_V_2) < signed(zext_ln1549_fu_190_p1)) else "0";
    icmp_ln1827_1_fu_157_p2 <= "1" when (trunc_ln1827_fu_147_p1 = ap_const_lv52_0) else "0";
    icmp_ln1827_fu_151_p2 <= "0" when (tmp_s_fu_137_p4 = ap_const_lv11_7FF) else "1";
    or_ln1827_fu_163_p2 <= (icmp_ln1827_fu_151_p2 or icmp_ln1827_1_fu_157_p2);
        select_ln70_1_cast_cast_fu_112_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln70_1_cast),4));

        select_ln93_cast_fu_108_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln93),4));

    select_ln94_fu_210_p3 <= 
        add_ln70_fu_205_p2 when (xor_ln1549_fu_199_p2(0) = '1') else 
        v_V_1_fu_60;
    shl_ln737_1_fu_183_p3 <= (i_V_1_reg_272 & ap_const_lv15_0);
    tmp_s_fu_137_p4 <= bitcast_ln1827_fu_134_p1(62 downto 52);
    trunc_ln1827_fu_147_p1 <= bitcast_ln1827_fu_134_p1(52 - 1 downto 0);
    v_V_1_out <= v_V_1_fu_60;

    v_V_1_out_ap_vld_assign_proc : process(ap_CS_fsm_state3, and_ln1827_1_fu_174_p2)
    begin
        if (((ap_const_lv1_0 = and_ln1827_1_fu_174_p2) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            v_V_1_out_ap_vld <= ap_const_logic_1;
        else 
            v_V_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln1549_fu_199_p2 <= (icmp_ln1549_fu_194_p2 xor ap_const_lv1_1);
    zext_ln1549_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln737_1_fu_183_p3),20));
end behav;
