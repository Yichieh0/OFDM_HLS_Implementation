from pynq import Overlay, allocate
import matplotlib.pyplot as plt
import pynq_composable
import numpy as np
import fir
import math

#---------- check the kernels included by the system ----------
ol = Overlay("commun.bit")
cfilter = ol.comm
print(f"Parent class: {cfilter.__class__.__bases__}, driver: {type(cfilter)}")
cfilter.c_dict

#--- check the kernels connected by the composable pipeline ---
cfilter.compose([cfilter.axi_dma, cfilter.pixl_to_symbol_0, cfilter.QAM_0, cfilter.pilot_insertion_0, cfilter.fft_top0_0, cfilter.CP_insertion_0, cfilter.channel_gen_0, cfilter.CP_removal_0, cfilter.fft_top1_0, cfilter.equalizer_pilot_remo_0, cfilter.deQAM_0, cfilter.symbol_to_pixl_0, cfilter.axi_dma])
cfilter.graph

dma_send = ol.axi_dma.sendchannel
dma_recv = ol.axi_dma.recvchannel

module_id = np.array([0,2,3,4,5,6,7,8,9,10,12])
len_module_id = len(module_id)
len_parameter_id = [4,4,4,3,4,6,4,3,5,4,4] # # of parameters in each module
parameter_sum = sum(len_parameter_id)

data_len = 480
qam_num = 16
sym_num = 2
pilot_width = 4
CP_length = 16
TAPS_NUM = 1
SNR = 30
FFT_len = 64

parameter_id = np.array([[data_len,qam_num,sym_num,pilot_width], # module_id = 0 pixl2sym
                         [data_len,qam_num,sym_num,pilot_width], # module_id = 2 QAM
                         [data_len,sym_num,pilot_width,CP_length], # module_id = 3 pilot insert
                         [data_len,sym_num,pilot_width], # module_id = 4 IFFT
                         [data_len,sym_num,pilot_width,CP_length], # module_id = 5 CP insert
                         [data_len,sym_num,pilot_width,CP_length,TAPS_NUM,SNR], # module_id = 6 channel
                         [data_len,sym_num,pilot_width,CP_length], # module_id = 7 CP remove
                         [data_len,sym_num,pilot_width], # module_id = 8 FFT
                         [data_len,sym_num,pilot_width,CP_length, TAPS_NUM], # module_id = 9 pilot remove
                         [data_len,qam_num,sym_num,pilot_width], # module_id = 10 deQAM
                         [data_len,qam_num,sym_num,pilot_width]],dtype=object)# module_id = 12 sym2pixl

in_num_sample = parameter_sum + 1 + data_len
out_num_sample = data_len
input_compensate = data_len%((FFT_len-pilot_width)/sym_num)

input_buffer = allocate(shape=(in_num_sample,), dtype=np.uint64)
output_buffer = allocate(shape=(out_num_sample,), dtype=np.uint64)

#------------------------- parameter setting ----------------------------#
temp = allocate(shape=(1,), dtype=np.uint64)
cnt_para_in = 0
for i in range(len_module_id):
    temp[0] = module_id[i] * pow(2,16) 
    for j in range(len_parameter_id[i]):
        input_buffer[cnt_para_in+j] = temp[0]
        input_buffer[cnt_para_in+j] = input_buffer[cnt_para_in+j] + j
        input_buffer[cnt_para_in+j] = input_buffer[cnt_para_in+j] * pow(2,32)
        input_buffer[cnt_para_in+j] = input_buffer[cnt_para_in+j] + parameter_id[i][j]
        #print(input_buffer[cnt_para_in+j])
    cnt_para_in = cnt_para_in+len_parameter_id[i]

input_buffer[parameter_sum] = (pow(2,16)-1)*pow(2,48)
#------------------------- data setting ----------------------------#
for k in range(data_len):
    input_buffer[parameter_sum+k+1] = k%256
   
#------------------------------ DMA --------------------------------#
dma_send.transfer(input_buffer)
dma_recv.transfer(output_buffer)
dma_send.wait()
dma_recv.wait()

#---------------------- error rate calculation ---------------------#
ber = 0
pixl_length = 8
for k in range(data_len):
    err = '{:08b}'.format(output_buffer[k]^(input_buffer[k+parameter_sum+1])).count('1')
    ber = ber + err
print("Bit Error Rate =", ber/data_len/pixl_length*100, "%")
#-------------------------------------------------------------------#
